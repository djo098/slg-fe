/**
 * SLG API
 * REST API for the New SLG (Novo Sistema de Logística de Gás)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { ActionResult } from '../schemas/actionResult';
// @ts-ignore
import { ConsumptionWorksheetTemplateCol } from '../schemas/consumptionWorksheetTemplateCol';
// @ts-ignore
import { DemandItem } from '../schemas/demandItem';
// @ts-ignore
import { DemandResponse } from '../schemas/demandResponse';
// @ts-ignore
import { DemandWorksheetTemplateCol } from '../schemas/demandWorksheetTemplateCol';
// @ts-ignore
import { DiarizationAlgorithm } from '../schemas/diarizationAlgorithm';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../../variables';
import { Configuration }                                     from '../../configuration';
import { ProfileService } from './sharedServices/auth.service';



@Injectable({
  providedIn: 'root'
})
export class DemandService {

    protected basePath = BASE_PATH;
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string|string[], @Optional() configuration: Configuration,private profileService : ProfileService) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (Array.isArray(basePath) && basePath.length > 0) {
                basePath = basePath[0];
            }

            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();

        
    }


    // @ts-ignore
    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, (value as Date).toISOString().substr(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
     * Get Consumption from TSO
     * 
     * @param balanceZoneId 
     * @param aggregationLevel 
     * @param ownerId 
     * @param consumptionType 
     * @param consumptionDate 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getConsumption(balanceZoneId: number, aggregationLevel: 'supply_area' | 'supply_point', ownerId: number, consumptionType: 'conventional' | 'ccgt', consumptionDate: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<ActionResult>;
    public getConsumption(balanceZoneId: number, aggregationLevel: 'supply_area' | 'supply_point', ownerId: number, consumptionType: 'conventional' | 'ccgt', consumptionDate: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<ActionResult>>;
    public getConsumption(balanceZoneId: number, aggregationLevel: 'supply_area' | 'supply_point', ownerId: number, consumptionType: 'conventional' | 'ccgt', consumptionDate: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<ActionResult>>;
    public getConsumption(balanceZoneId: number, aggregationLevel: 'supply_area' | 'supply_point', ownerId: number, consumptionType: 'conventional' | 'ccgt', consumptionDate: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        if (balanceZoneId === null || balanceZoneId === undefined) {
            throw new Error('Required parameter balanceZoneId was null or undefined when calling getConsumption.');
        }
        if (aggregationLevel === null || aggregationLevel === undefined) {
            throw new Error('Required parameter aggregationLevel was null or undefined when calling getConsumption.');
        }
        if (ownerId === null || ownerId === undefined) {
            throw new Error('Required parameter ownerId was null or undefined when calling getConsumption.');
        }
        if (consumptionType === null || consumptionType === undefined) {
            throw new Error('Required parameter consumptionType was null or undefined when calling getConsumption.');
        }
        if (consumptionDate === null || consumptionDate === undefined) {
            throw new Error('Required parameter consumptionDate was null or undefined when calling getConsumption.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (balanceZoneId !== undefined && balanceZoneId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>balanceZoneId, 'balance_zone_id');
        }
        if (aggregationLevel !== undefined && aggregationLevel !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>aggregationLevel, 'aggregation_level');
        }
        if (ownerId !== undefined && ownerId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>ownerId, 'owner_id');
        }
        if (consumptionType !== undefined && consumptionType !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>consumptionType, 'consumption_type');
        }
        if (consumptionDate !== undefined && consumptionDate !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>consumptionDate, 'consumption_date');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (api_key) required
        localVarCredential = this.configuration.lookupCredential('api_key');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('X-Auth', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/demand/consumption`;
        return this.httpClient.request<ActionResult>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Consumption from TSO
     * 
     * @param balanceZoneId 
     * @param startDate 
     * @param endDate 
     * @param aggregationLevel 
     * @param ownerId 
     * @param demandTypeComp1 
     * @param demandTypeComp2 
     * @param supplyAreas 
     * @param consumptionOffsetComp1 
     * @param consumptionOffsetComp2 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getConsumptionComparison(balanceZoneId: number, startDate: string, endDate: string, aggregationLevel: 'supply_area' | 'supply_point', ownerId: number, demandTypeComp1: string, demandTypeComp2: string, supplyAreas?: Array<number>, consumptionOffsetComp1?: string, consumptionOffsetComp2?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<DemandResponse>;
    public getConsumptionComparison(balanceZoneId: number, startDate: string, endDate: string, aggregationLevel: 'supply_area' | 'supply_point', ownerId: number, demandTypeComp1: string, demandTypeComp2: string, supplyAreas?: Array<number>, consumptionOffsetComp1?: string, consumptionOffsetComp2?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<DemandResponse>>;
    public getConsumptionComparison(balanceZoneId: number, startDate: string, endDate: string, aggregationLevel: 'supply_area' | 'supply_point', ownerId: number, demandTypeComp1: string, demandTypeComp2: string, supplyAreas?: Array<number>, consumptionOffsetComp1?: string, consumptionOffsetComp2?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<DemandResponse>>;
    public getConsumptionComparison(balanceZoneId: number, startDate: string, endDate: string, aggregationLevel: 'supply_area' | 'supply_point', ownerId: number, demandTypeComp1: string, demandTypeComp2: string, supplyAreas?: Array<number>, consumptionOffsetComp1?: string, consumptionOffsetComp2?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        if (balanceZoneId === null || balanceZoneId === undefined) {
            throw new Error('Required parameter balanceZoneId was null or undefined when calling getConsumptionComparison.');
        }
        if (startDate === null || startDate === undefined) {
            throw new Error('Required parameter startDate was null or undefined when calling getConsumptionComparison.');
        }
        if (endDate === null || endDate === undefined) {
            throw new Error('Required parameter endDate was null or undefined when calling getConsumptionComparison.');
        }
        if (aggregationLevel === null || aggregationLevel === undefined) {
            throw new Error('Required parameter aggregationLevel was null or undefined when calling getConsumptionComparison.');
        }
        if (ownerId === null || ownerId === undefined) {
            throw new Error('Required parameter ownerId was null or undefined when calling getConsumptionComparison.');
        }
        if (demandTypeComp1 === null || demandTypeComp1 === undefined) {
            throw new Error('Required parameter demandTypeComp1 was null or undefined when calling getConsumptionComparison.');
        }
        if (demandTypeComp2 === null || demandTypeComp2 === undefined) {
            throw new Error('Required parameter demandTypeComp2 was null or undefined when calling getConsumptionComparison.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (balanceZoneId !== undefined && balanceZoneId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>balanceZoneId, 'balance_zone_id');
        }
        if (startDate !== undefined && startDate !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>startDate, 'start_date');
        }
        if (endDate !== undefined && endDate !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>endDate, 'end_date');
        }
        if (aggregationLevel !== undefined && aggregationLevel !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>aggregationLevel, 'aggregation_level');
        }
        if (ownerId !== undefined && ownerId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>ownerId, 'owner_id');
        }
        if (supplyAreas) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                [...supplyAreas].join(COLLECTION_FORMATS['csv']), 'supply_areas');
        }
        if (demandTypeComp1 !== undefined && demandTypeComp1 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>demandTypeComp1, 'demand_type_comp_1');
        }
        if (demandTypeComp2 !== undefined && demandTypeComp2 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>demandTypeComp2, 'demand_type_comp_2');
        }
        if (consumptionOffsetComp1 !== undefined && consumptionOffsetComp1 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>consumptionOffsetComp1, 'consumption_offset_comp_1');
        }
        if (consumptionOffsetComp2 !== undefined && consumptionOffsetComp2 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>consumptionOffsetComp2, 'consumption_offset_comp_2');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (api_key) required
        localVarCredential = this.configuration.lookupCredential('api_key');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('X-Auth', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/demand/consumption/comparison`;
        return this.httpClient.request<DemandResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Consumption Types
     * 
     * @param balanceZoneId 
     * @param ownerId 
     * @param startDate 
     * @param endDate 
     * @param supplyAreas 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getConsumptionTypes(balanceZoneId: number, ownerId: number, startDate: string, endDate: string, supplyAreas?: Array<number>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<string>>;
    public getConsumptionTypes(balanceZoneId: number, ownerId: number, startDate: string, endDate: string, supplyAreas?: Array<number>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<string>>>;
    public getConsumptionTypes(balanceZoneId: number, ownerId: number, startDate: string, endDate: string, supplyAreas?: Array<number>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<string>>>;
    public getConsumptionTypes(balanceZoneId: number, ownerId: number, startDate: string, endDate: string, supplyAreas?: Array<number>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        if (balanceZoneId === null || balanceZoneId === undefined) {
            throw new Error('Required parameter balanceZoneId was null or undefined when calling getConsumptionTypes.');
        }
        if (ownerId === null || ownerId === undefined) {
            throw new Error('Required parameter ownerId was null or undefined when calling getConsumptionTypes.');
        }
        if (startDate === null || startDate === undefined) {
            throw new Error('Required parameter startDate was null or undefined when calling getConsumptionTypes.');
        }
        if (endDate === null || endDate === undefined) {
            throw new Error('Required parameter endDate was null or undefined when calling getConsumptionTypes.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (balanceZoneId !== undefined && balanceZoneId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>balanceZoneId, 'balance_zone_id');
        }
        if (ownerId !== undefined && ownerId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>ownerId, 'owner_id');
        }
        if (startDate !== undefined && startDate !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>startDate, 'start_date');
        }
        if (endDate !== undefined && endDate !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>endDate, 'end_date');
        }
        if (supplyAreas) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                [...supplyAreas].join(COLLECTION_FORMATS['csv']), 'supply_areas');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (api_key) required
        localVarCredential = this.configuration.lookupCredential('api_key');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('X-Auth', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/demand/consumption/types`;
        return this.httpClient.request<Array<string>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Consumption Worksheet Template
     * 
     * @param balanceZoneId 
     * @param ownerId 
     * @param consumptionType 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getConsumptionWorksheetTemplate(balanceZoneId: number, ownerId: number, consumptionType: 'conventional' | 'ccgt', observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<ConsumptionWorksheetTemplateCol>>;
    public getConsumptionWorksheetTemplate(balanceZoneId: number, ownerId: number, consumptionType: 'conventional' | 'ccgt', observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<ConsumptionWorksheetTemplateCol>>>;
    public getConsumptionWorksheetTemplate(balanceZoneId: number, ownerId: number, consumptionType: 'conventional' | 'ccgt', observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<ConsumptionWorksheetTemplateCol>>>;
    public getConsumptionWorksheetTemplate(balanceZoneId: number, ownerId: number, consumptionType: 'conventional' | 'ccgt', observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        if (balanceZoneId === null || balanceZoneId === undefined) {
            throw new Error('Required parameter balanceZoneId was null or undefined when calling getConsumptionWorksheetTemplate.');
        }
        if (ownerId === null || ownerId === undefined) {
            throw new Error('Required parameter ownerId was null or undefined when calling getConsumptionWorksheetTemplate.');
        }
        if (consumptionType === null || consumptionType === undefined) {
            throw new Error('Required parameter consumptionType was null or undefined when calling getConsumptionWorksheetTemplate.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (balanceZoneId !== undefined && balanceZoneId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>balanceZoneId, 'balance_zone_id');
        }
        if (ownerId !== undefined && ownerId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>ownerId, 'owner_id');
        }
        if (consumptionType !== undefined && consumptionType !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>consumptionType, 'consumption_type');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (api_key) required
        localVarCredential = this.configuration.lookupCredential('api_key');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('X-Auth', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/demand/consumption/file`;
        return this.httpClient.request<Array<ConsumptionWorksheetTemplateCol>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Demand
     * 
     * @param balanceZoneId 
     * @param startDate 
     * @param endDate 
     * @param granularity 
     * @param ownerId 
     * @param supplyAreas 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDemand(balanceZoneId: number, startDate: string, endDate: string, granularity: 'daily' | 'monthly', ownerId: number, supplyAreas?: Array<number>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<DemandResponse>;
    public getDemand(balanceZoneId: number, startDate: string, endDate: string, granularity: 'daily' | 'monthly', ownerId: number, supplyAreas?: Array<number>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<DemandResponse>>;
    public getDemand(balanceZoneId: number, startDate: string, endDate: string, granularity: 'daily' | 'monthly', ownerId: number, supplyAreas?: Array<number>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<DemandResponse>>;
    public getDemand(balanceZoneId: number, startDate: string, endDate: string, granularity: 'daily' | 'monthly', ownerId: number, supplyAreas?: Array<number>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        if (balanceZoneId === null || balanceZoneId === undefined) {
            throw new Error('Required parameter balanceZoneId was null or undefined when calling getDemand.');
        }
        if (startDate === null || startDate === undefined) {
            throw new Error('Required parameter startDate was null or undefined when calling getDemand.');
        }
        if (endDate === null || endDate === undefined) {
            throw new Error('Required parameter endDate was null or undefined when calling getDemand.');
        }
        if (granularity === null || granularity === undefined) {
            throw new Error('Required parameter granularity was null or undefined when calling getDemand.');
        }
        if (ownerId === null || ownerId === undefined) {
            throw new Error('Required parameter ownerId was null or undefined when calling getDemand.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (balanceZoneId !== undefined && balanceZoneId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>balanceZoneId, 'balance_zone_id');
        }
        if (startDate !== undefined && startDate !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>startDate, 'start_date');
        }
        if (endDate !== undefined && endDate !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>endDate, 'end_date');
        }
        if (supplyAreas) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                [...supplyAreas].join(COLLECTION_FORMATS['csv']), 'supply_areas');
        }
        if (granularity !== undefined && granularity !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>granularity, 'granularity');
        }
        if (ownerId !== undefined && ownerId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>ownerId, 'owner_id');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (api_key) required
        localVarCredential = this.configuration.lookupCredential('api_key');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('X-Auth', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/demand`;
        return this.httpClient.request<DemandResponse>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Demand Worksheet Template
     * 
     * @param balanceZoneId 
     * @param startDate 
     * @param endDate 
     * @param granularity 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDemandWorksheetTemplate(balanceZoneId: number, startDate: string, endDate: string, granularity: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<DemandWorksheetTemplateCol>>;
    public getDemandWorksheetTemplate(balanceZoneId: number, startDate: string, endDate: string, granularity: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<DemandWorksheetTemplateCol>>>;
    public getDemandWorksheetTemplate(balanceZoneId: number, startDate: string, endDate: string, granularity: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<DemandWorksheetTemplateCol>>>;
    public getDemandWorksheetTemplate(balanceZoneId: number, startDate: string, endDate: string, granularity: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        if (balanceZoneId === null || balanceZoneId === undefined) {
            throw new Error('Required parameter balanceZoneId was null or undefined when calling getDemandWorksheetTemplate.');
        }
        if (startDate === null || startDate === undefined) {
            throw new Error('Required parameter startDate was null or undefined when calling getDemandWorksheetTemplate.');
        }
        if (endDate === null || endDate === undefined) {
            throw new Error('Required parameter endDate was null or undefined when calling getDemandWorksheetTemplate.');
        }
        if (granularity === null || granularity === undefined) {
            throw new Error('Required parameter granularity was null or undefined when calling getDemandWorksheetTemplate.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (balanceZoneId !== undefined && balanceZoneId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>balanceZoneId, 'balance_zone_id');
        }
        if (startDate !== undefined && startDate !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>startDate, 'start_date');
        }
        if (endDate !== undefined && endDate !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>endDate, 'end_date');
        }
        if (granularity !== undefined && granularity !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>granularity, 'granularity');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (api_key) required
        localVarCredential = this.configuration.lookupCredential('api_key');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('X-Auth', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/demand/worksheet`;
        return this.httpClient.request<Array<DemandWorksheetTemplateCol>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Set demand for a certain day
     * @param balanceZoneId 
     * @param ownerId 
     * @param demandItem Array of Demand item objects to add
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setDailyDemand(balanceZoneId: number, ownerId: number, demandItem: Array<DemandItem>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<DemandItem>>;
    public setDailyDemand(balanceZoneId: number, ownerId: number, demandItem: Array<DemandItem>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<DemandItem>>>;
    public setDailyDemand(balanceZoneId: number, ownerId: number, demandItem: Array<DemandItem>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<DemandItem>>>;
    public setDailyDemand(balanceZoneId: number, ownerId: number, demandItem: Array<DemandItem>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        if (balanceZoneId === null || balanceZoneId === undefined) {
            throw new Error('Required parameter balanceZoneId was null or undefined when calling setDailyDemand.');
        }
        if (ownerId === null || ownerId === undefined) {
            throw new Error('Required parameter ownerId was null or undefined when calling setDailyDemand.');
        }
        if (demandItem === null || demandItem === undefined) {
            throw new Error('Required parameter demandItem was null or undefined when calling setDailyDemand.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (balanceZoneId !== undefined && balanceZoneId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>balanceZoneId, 'balance_zone_id');
        }
        if (ownerId !== undefined && ownerId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>ownerId, 'owner_id');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (api_key) required
        localVarCredential = this.configuration.lookupCredential('api_key');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('X-Auth', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/demand/updateDaily`;
        return this.httpClient.request<Array<DemandItem>>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: demandItem,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Upload consumption via Worksheet
     * 
     * @param balanceZoneId 
     * @param ownerId 
     * @param timePeriod 
     * @param aggregationLevel 
     * @param consumptionType 
     * @param requestBody Array of XLMFile objects to add
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public uploadConsumptionWorksheet(balanceZoneId: number, ownerId: number, timePeriod: string, aggregationLevel: 'supply_area' | 'supply_point', consumptionType: 'conventional' | 'ccgt', requestBody: Array<{ [key: string]: any; }>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;
    public uploadConsumptionWorksheet(balanceZoneId: number, ownerId: number, timePeriod: string, aggregationLevel: 'supply_area' | 'supply_point', consumptionType: 'conventional' | 'ccgt', requestBody: Array<{ [key: string]: any; }>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;
    public uploadConsumptionWorksheet(balanceZoneId: number, ownerId: number, timePeriod: string, aggregationLevel: 'supply_area' | 'supply_point', consumptionType: 'conventional' | 'ccgt', requestBody: Array<{ [key: string]: any; }>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;
    public uploadConsumptionWorksheet(balanceZoneId: number, ownerId: number, timePeriod: string, aggregationLevel: 'supply_area' | 'supply_point', consumptionType: 'conventional' | 'ccgt', requestBody: Array<{ [key: string]: any; }>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {
        if (balanceZoneId === null || balanceZoneId === undefined) {
            throw new Error('Required parameter balanceZoneId was null or undefined when calling uploadConsumptionWorksheet.');
        }
        if (ownerId === null || ownerId === undefined) {
            throw new Error('Required parameter ownerId was null or undefined when calling uploadConsumptionWorksheet.');
        }
        if (timePeriod === null || timePeriod === undefined) {
            throw new Error('Required parameter timePeriod was null or undefined when calling uploadConsumptionWorksheet.');
        }
        if (aggregationLevel === null || aggregationLevel === undefined) {
            throw new Error('Required parameter aggregationLevel was null or undefined when calling uploadConsumptionWorksheet.');
        }
        if (consumptionType === null || consumptionType === undefined) {
            throw new Error('Required parameter consumptionType was null or undefined when calling uploadConsumptionWorksheet.');
        }
        if (requestBody === null || requestBody === undefined) {
            throw new Error('Required parameter requestBody was null or undefined when calling uploadConsumptionWorksheet.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (balanceZoneId !== undefined && balanceZoneId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>balanceZoneId, 'balance_zone_id');
        }
        if (ownerId !== undefined && ownerId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>ownerId, 'owner_id');
        }
        if (timePeriod !== undefined && timePeriod !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>timePeriod, 'time_period');
        }
        if (aggregationLevel !== undefined && aggregationLevel !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>aggregationLevel, 'aggregation_level');
        }
        if (consumptionType !== undefined && consumptionType !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>consumptionType, 'consumption_type');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (api_key) required
        localVarCredential = this.configuration.lookupCredential('api_key');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('X-Auth', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/demand/consumption/file`;
        return this.httpClient.request<any>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: requestBody,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Upload demand via Worksheet
     * 
     * @param balanceZoneId 
     * @param diarizationAlgorithm 
     * @param ownerId 
     * @param granularity 
     * @param pointType 
     * @param create 
     * @param requestBody Demand Worksheet object to add
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public uploadDemandWorksheet(balanceZoneId: number, diarizationAlgorithm: string, ownerId: number, granularity: string, pointType: 'supply_point' | 'virtual_balancing_point', create: boolean, requestBody: Array<{ [key: string]: any; }>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;
    public uploadDemandWorksheet(balanceZoneId: number, diarizationAlgorithm: string, ownerId: number, granularity: string, pointType: 'supply_point' | 'virtual_balancing_point', create: boolean, requestBody: Array<{ [key: string]: any; }>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;
    public uploadDemandWorksheet(balanceZoneId: number, diarizationAlgorithm: string, ownerId: number, granularity: string, pointType: 'supply_point' | 'virtual_balancing_point', create: boolean, requestBody: Array<{ [key: string]: any; }>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;
    public uploadDemandWorksheet(balanceZoneId: number, diarizationAlgorithm: string, ownerId: number, granularity: string, pointType: 'supply_point' | 'virtual_balancing_point', create: boolean, requestBody: Array<{ [key: string]: any; }>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {
        if (balanceZoneId === null || balanceZoneId === undefined) {
            throw new Error('Required parameter balanceZoneId was null or undefined when calling uploadDemandWorksheet.');
        }
        if (diarizationAlgorithm === null || diarizationAlgorithm === undefined) {
            throw new Error('Required parameter diarizationAlgorithm was null or undefined when calling uploadDemandWorksheet.');
        }
        if (ownerId === null || ownerId === undefined) {
            throw new Error('Required parameter ownerId was null or undefined when calling uploadDemandWorksheet.');
        }
        if (granularity === null || granularity === undefined) {
            throw new Error('Required parameter granularity was null or undefined when calling uploadDemandWorksheet.');
        }
        if (pointType === null || pointType === undefined) {
            throw new Error('Required parameter pointType was null or undefined when calling uploadDemandWorksheet.');
        }
        if (create === null || create === undefined) {
            throw new Error('Required parameter create was null or undefined when calling uploadDemandWorksheet.');
        }
        if (requestBody === null || requestBody === undefined) {
            throw new Error('Required parameter requestBody was null or undefined when calling uploadDemandWorksheet.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (balanceZoneId !== undefined && balanceZoneId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>balanceZoneId, 'balance_zone_id');
        }
        if (diarizationAlgorithm !== undefined && diarizationAlgorithm !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>diarizationAlgorithm, 'diarization_algorithm');
        }
        if (ownerId !== undefined && ownerId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>ownerId, 'owner_id');
        }
        if (granularity !== undefined && granularity !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>granularity, 'granularity');
        }
        if (pointType !== undefined && pointType !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pointType, 'point_type');
        }
        if (create !== undefined && create !== null) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
              <any>create, 'create');
          }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (api_key) required
        localVarCredential = this.configuration.lookupCredential('api_key');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('X-Auth', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/demand/worksheet`;
        return this.httpClient.request<any>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: requestBody,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
