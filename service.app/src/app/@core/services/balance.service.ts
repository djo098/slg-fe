/**
 * SLG API
 * REST API for the New SLG (Novo Sistema de Logística de Gás)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { Balance } from '../schemas/balance';
// @ts-ignore
import { BalanceLayout } from '../schemas/balanceLayout';
// @ts-ignore
import { BalanceLayoutColumn } from '../schemas/balanceLayoutColumn';
// @ts-ignore
import { BalanceLayoutConfiguration } from '../schemas/balanceLayoutConfiguration';
// @ts-ignore
import { BalanceOperation } from '../schemas/balanceOperation';
// @ts-ignore
import { BalanceSimulationOperation } from '../schemas/balanceSimulationOperation';
// @ts-ignore
import { Simulation } from '../schemas/simulation';
// @ts-ignore
import { VirtualBalance } from '../schemas/virtualBalance';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../../variables';
import { Configuration }                                     from '../../configuration';
import { ProfileService } from './sharedServices/auth.service';



@Injectable({
  providedIn: 'root'
})
export class BalanceService {

    protected basePath = BASE_PATH;
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string|string[], @Optional() configuration: Configuration, private profileService : ProfileService ) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (Array.isArray(basePath) && basePath.length > 0) {
                basePath = basePath[0];
            }

            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();

            
 
    }
  // @ts-ignore
  private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
    if (typeof value === "object" && value instanceof Date === false) {
        httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
        httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
}

private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
    if (value == null) {
        return httpParams;
    }

    if (typeof value === "object") {
        if (Array.isArray(value)) {
            (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
        } else if (value instanceof Date) {
            if (key != null) {
                httpParams = httpParams.append(key, (value as Date).toISOString().substr(0, 10));
            } else {
               throw Error("key may not be null if value is Date");
            }
        } else {
            Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                httpParams, value[k], key != null ? `${key}.${k}` : k));
        }
    } else if (key != null) {
        httpParams = httpParams.append(key, value);
    } else {
        throw Error("key may not be null if value is not object or array");
    }
    return httpParams;
}

/**
 * Add a new balance layout
 * 
 * @param balanceLayoutConfiguration Balance Layout object to add to master data
 * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
 * @param reportProgress flag to report request and response progress.
 */
public addBalanceLayoutConfiguration(balanceLayoutConfiguration: BalanceLayoutConfiguration, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<BalanceLayoutConfiguration>;
public addBalanceLayoutConfiguration(balanceLayoutConfiguration: BalanceLayoutConfiguration, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<BalanceLayoutConfiguration>>;
public addBalanceLayoutConfiguration(balanceLayoutConfiguration: BalanceLayoutConfiguration, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<BalanceLayoutConfiguration>>;
public addBalanceLayoutConfiguration(balanceLayoutConfiguration: BalanceLayoutConfiguration, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
    if (balanceLayoutConfiguration === null || balanceLayoutConfiguration === undefined) {
        throw new Error('Required parameter balanceLayoutConfiguration was null or undefined when calling addBalanceLayoutConfiguration.');
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (api_key) required
    localVarCredential = this.configuration.lookupCredential('api_key');
    if (localVarCredential) {
        localVarHeaders = localVarHeaders.set('X-Auth', localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
        localVarHttpContext = new HttpContext();
    }


    // to determine the Content-Type header
    const consumes: string[] = [
        'application/json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
        localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
        if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
            responseType_ = 'json';
        } else {
            responseType_ = 'blob';
        }
    }

    let localVarPath = `/balance/layouts`;
    return this.httpClient.request<BalanceLayoutConfiguration>('post', `${this.configuration.basePath}${localVarPath}`,
        {
            context: localVarHttpContext,
            body: balanceLayoutConfiguration,
            responseType: <any>responseType_,
            withCredentials: this.configuration.withCredentials,
            headers: localVarHeaders,
            observe: observe,
            reportProgress: reportProgress
        }
    );
}

/**
 * Create balance operations
 * @param balanceZoneId 
 * @param entity 
 * @param balanceOperation Array of BalanceOperation objects to add
 * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
 * @param reportProgress flag to report request and response progress.
 */
public addBalanceOperations(balanceZoneId: number, entity: number, balanceOperation: Array<BalanceOperation>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<BalanceOperation>>;
public addBalanceOperations(balanceZoneId: number, entity: number, balanceOperation: Array<BalanceOperation>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<BalanceOperation>>>;
public addBalanceOperations(balanceZoneId: number, entity: number, balanceOperation: Array<BalanceOperation>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<BalanceOperation>>>;
public addBalanceOperations(balanceZoneId: number, entity: number, balanceOperation: Array<BalanceOperation>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
    if (balanceZoneId === null || balanceZoneId === undefined) {
        throw new Error('Required parameter balanceZoneId was null or undefined when calling addBalanceOperations.');
    }
    if (entity === null || entity === undefined) {
        throw new Error('Required parameter entity was null or undefined when calling addBalanceOperations.');
    }
    if (balanceOperation === null || balanceOperation === undefined) {
        throw new Error('Required parameter balanceOperation was null or undefined when calling addBalanceOperations.');
    }

    let localVarQueryParameters = new HttpParams({encoder: this.encoder});
    if (balanceZoneId !== undefined && balanceZoneId !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
        <any>balanceZoneId, 'balance_zone_id');
    }
    if (entity !== undefined && entity !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
        <any>entity, 'entity');
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (api_key) required
    localVarCredential = this.configuration.lookupCredential('api_key');
    if (localVarCredential) {
        localVarHeaders = localVarHeaders.set('X-Auth', localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
        localVarHttpContext = new HttpContext();
    }


    // to determine the Content-Type header
    const consumes: string[] = [
        'application/json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
        localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
        if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
            responseType_ = 'json';
        } else {
            responseType_ = 'blob';
        }
    }

    let localVarPath = `/balance/addOperations`;
    return this.httpClient.request<Array<BalanceOperation>>('post', `${this.configuration.basePath}${localVarPath}`,
        {
            context: localVarHttpContext,
            body: balanceOperation,
            params: localVarQueryParameters,
            responseType: <any>responseType_,
            withCredentials: this.configuration.withCredentials,
            headers: localVarHeaders,
            observe: observe,
            reportProgress: reportProgress
        }
    );
}

/**
 * Create balance operations
 * @param simulationId 
 * @param balanceSimulationOperation Array of BalanceSimulationOperation objects to add
 * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
 * @param reportProgress flag to report request and response progress.
 */
public addBalanceSimulationOperations(simulationId: number, balanceSimulationOperation: Array<BalanceSimulationOperation>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<BalanceSimulationOperation>>;
public addBalanceSimulationOperations(simulationId: number, balanceSimulationOperation: Array<BalanceSimulationOperation>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<BalanceSimulationOperation>>>;
public addBalanceSimulationOperations(simulationId: number, balanceSimulationOperation: Array<BalanceSimulationOperation>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<BalanceSimulationOperation>>>;
public addBalanceSimulationOperations(simulationId: number, balanceSimulationOperation: Array<BalanceSimulationOperation>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
    if (simulationId === null || simulationId === undefined) {
        throw new Error('Required parameter simulationId was null or undefined when calling addBalanceSimulationOperations.');
    }
    if (balanceSimulationOperation === null || balanceSimulationOperation === undefined) {
        throw new Error('Required parameter balanceSimulationOperation was null or undefined when calling addBalanceSimulationOperations.');
    }

    let localVarQueryParameters = new HttpParams({encoder: this.encoder});
    if (simulationId !== undefined && simulationId !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
        <any>simulationId, 'simulation_id');
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (api_key) required
    localVarCredential = this.configuration.lookupCredential('api_key');
    if (localVarCredential) {
        localVarHeaders = localVarHeaders.set('X-Auth', localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
        localVarHttpContext = new HttpContext();
    }


    // to determine the Content-Type header
    const consumes: string[] = [
        'application/json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
        localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
        if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
            responseType_ = 'json';
        } else {
            responseType_ = 'blob';
        }
    }

    let localVarPath = `/balance/simulation/addOperations`;
    return this.httpClient.request<Array<BalanceSimulationOperation>>('post', `${this.configuration.basePath}${localVarPath}`,
        {
            context: localVarHttpContext,
            body: balanceSimulationOperation,
            params: localVarQueryParameters,
            responseType: <any>responseType_,
            withCredentials: this.configuration.withCredentials,
            headers: localVarHeaders,
            observe: observe,
            reportProgress: reportProgress
        }
    );
}

/**
 * Create virtual balance operations
 * @param virtualBalanceId 
 * @param balanceSimulationOperation Array of BalanceSimulationOperation objects to add
 * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
 * @param reportProgress flag to report request and response progress.
 */
public addVirtualBalanceOperations(virtualBalanceId: number, balanceSimulationOperation: Array<BalanceSimulationOperation>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<BalanceSimulationOperation>>;
public addVirtualBalanceOperations(virtualBalanceId: number, balanceSimulationOperation: Array<BalanceSimulationOperation>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<BalanceSimulationOperation>>>;
public addVirtualBalanceOperations(virtualBalanceId: number, balanceSimulationOperation: Array<BalanceSimulationOperation>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<BalanceSimulationOperation>>>;
public addVirtualBalanceOperations(virtualBalanceId: number, balanceSimulationOperation: Array<BalanceSimulationOperation>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
    if (virtualBalanceId === null || virtualBalanceId === undefined) {
        throw new Error('Required parameter virtualBalanceId was null or undefined when calling addVirtualBalanceOperations.');
    }
    if (balanceSimulationOperation === null || balanceSimulationOperation === undefined) {
        throw new Error('Required parameter balanceSimulationOperation was null or undefined when calling addVirtualBalanceOperations.');
    }

    let localVarQueryParameters = new HttpParams({encoder: this.encoder});
    if (virtualBalanceId !== undefined && virtualBalanceId !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
        <any>virtualBalanceId, 'virtual_balance_id');
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (api_key) required
    localVarCredential = this.configuration.lookupCredential('api_key');
    if (localVarCredential) {
        localVarHeaders = localVarHeaders.set('X-Auth', localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
        localVarHttpContext = new HttpContext();
    }


    // to determine the Content-Type header
    const consumes: string[] = [
        'application/json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
        localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
        if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
            responseType_ = 'json';
        } else {
            responseType_ = 'blob';
        }
    }

    let localVarPath = `/balance/virtual/addOperations`;
    return this.httpClient.request<Array<BalanceSimulationOperation>>('post', `${this.configuration.basePath}${localVarPath}`,
        {
            context: localVarHttpContext,
            body: balanceSimulationOperation,
            params: localVarQueryParameters,
            responseType: <any>responseType_,
            withCredentials: this.configuration.withCredentials,
            headers: localVarHeaders,
            observe: observe,
            reportProgress: reportProgress
        }
    );
}

/**
 * Create balance zone\&#39;s simulated balance
 * @param simulation Simulation object to add
 * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
 * @param reportProgress flag to report request and response progress.
 */
public createBalanceSimulation(simulation: Simulation, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Balance>;
public createBalanceSimulation(simulation: Simulation, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Balance>>;
public createBalanceSimulation(simulation: Simulation, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Balance>>;
public createBalanceSimulation(simulation: Simulation, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
    if (simulation === null || simulation === undefined) {
        throw new Error('Required parameter simulation was null or undefined when calling createBalanceSimulation.');
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (api_key) required
    localVarCredential = this.configuration.lookupCredential('api_key');
    if (localVarCredential) {
        localVarHeaders = localVarHeaders.set('X-Auth', localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
        localVarHttpContext = new HttpContext();
    }


    // to determine the Content-Type header
    const consumes: string[] = [
        'application/json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
        localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
        if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
            responseType_ = 'json';
        } else {
            responseType_ = 'blob';
        }
    }

    let localVarPath = `/balance/simulation`;
    return this.httpClient.request<Balance>('post', `${this.configuration.basePath}${localVarPath}`,
        {
            context: localVarHttpContext,
            body: simulation,
            responseType: <any>responseType_,
            withCredentials: this.configuration.withCredentials,
            headers: localVarHeaders,
            observe: observe,
            reportProgress: reportProgress
        }
    );
}

/**
 * Create balance zone\&#39;s virtual balance
 * @param virtualBalance Virtual balance object to add
 * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
 * @param reportProgress flag to report request and response progress.
 */
public createVirtualBalance(virtualBalance: VirtualBalance, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<VirtualBalance>;
public createVirtualBalance(virtualBalance: VirtualBalance, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<VirtualBalance>>;
public createVirtualBalance(virtualBalance: VirtualBalance, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<VirtualBalance>>;
public createVirtualBalance(virtualBalance: VirtualBalance, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
    if (virtualBalance === null || virtualBalance === undefined) {
        throw new Error('Required parameter virtualBalance was null or undefined when calling createVirtualBalance.');
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (api_key) required
    localVarCredential = this.configuration.lookupCredential('api_key');
    if (localVarCredential) {
        localVarHeaders = localVarHeaders.set('X-Auth', localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
        localVarHttpContext = new HttpContext();
    }


    // to determine the Content-Type header
    const consumes: string[] = [
        'application/json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
        localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
        if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
            responseType_ = 'json';
        } else {
            responseType_ = 'blob';
        }
    }

    let localVarPath = `/balance/virtual/configuration`;
    return this.httpClient.request<VirtualBalance>('post', `${this.configuration.basePath}${localVarPath}`,
        {
            context: localVarHttpContext,
            body: virtualBalance,
            responseType: <any>responseType_,
            withCredentials: this.configuration.withCredentials,
            headers: localVarHeaders,
            observe: observe,
            reportProgress: reportProgress
        }
    );
}

/**
 * Returns all Balance Simulations
 * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
 * @param reportProgress flag to report request and response progress.
 */
public getAllBalanceSimulations(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<Simulation>>;
public getAllBalanceSimulations(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<Simulation>>>;
public getAllBalanceSimulations(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<Simulation>>>;
public getAllBalanceSimulations(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (api_key) required
    localVarCredential = this.configuration.lookupCredential('api_key');
    if (localVarCredential) {
        localVarHeaders = localVarHeaders.set('X-Auth', localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
        localVarHttpContext = new HttpContext();
    }


    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
        if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
            responseType_ = 'json';
        } else {
            responseType_ = 'blob';
        }
    }

    let localVarPath = `/balance/simulation/all`;
    return this.httpClient.request<Array<Simulation>>('get', `${this.configuration.basePath}${localVarPath}`,
        {
            context: localVarHttpContext,
            responseType: <any>responseType_,
            withCredentials: this.configuration.withCredentials,
            headers: localVarHeaders,
            observe: observe,
            reportProgress: reportProgress
        }
    );
}

/**
 * Returns all Virtual Balances
 * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
 * @param reportProgress flag to report request and response progress.
 */
public getAllVirtualBalances(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<Simulation>>;
public getAllVirtualBalances(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<Simulation>>>;
public getAllVirtualBalances(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<Simulation>>>;
public getAllVirtualBalances(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (api_key) required
    localVarCredential = this.configuration.lookupCredential('api_key');
    if (localVarCredential) {
        localVarHeaders = localVarHeaders.set('X-Auth', localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
        localVarHttpContext = new HttpContext();
    }


    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
        if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
            responseType_ = 'json';
        } else {
            responseType_ = 'blob';
        }
    }

    let localVarPath = `/balance/virtual/all`;
    return this.httpClient.request<Array<Simulation>>('get', `${this.configuration.basePath}${localVarPath}`,
        {
            context: localVarHttpContext,
            responseType: <any>responseType_,
            withCredentials: this.configuration.withCredentials,
            headers: localVarHeaders,
            observe: observe,
            reportProgress: reportProgress
        }
    );
}

/**
 * Get balance zone\&#39;s balance
 * @param balanceZoneId 
 * @param startDate 
 * @param endDate 
 * @param entity 
 * @param layoutId 
 * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
 * @param reportProgress flag to report request and response progress.
 */
public getBalance(balanceZoneId: number, startDate: string, endDate: string, entity: number, layoutId?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<Balance>>;
public getBalance(balanceZoneId: number, startDate: string, endDate: string, entity: number, layoutId?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<Balance>>>;
public getBalance(balanceZoneId: number, startDate: string, endDate: string, entity: number, layoutId?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<Balance>>>;
public getBalance(balanceZoneId: number, startDate: string, endDate: string, entity: number, layoutId?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
    if (balanceZoneId === null || balanceZoneId === undefined) {
        throw new Error('Required parameter balanceZoneId was null or undefined when calling getBalance.');
    }
    if (startDate === null || startDate === undefined) {
        throw new Error('Required parameter startDate was null or undefined when calling getBalance.');
    }
    if (endDate === null || endDate === undefined) {
        throw new Error('Required parameter endDate was null or undefined when calling getBalance.');
    }
    if (entity === null || entity === undefined) {
        throw new Error('Required parameter entity was null or undefined when calling getBalance.');
    }

    let localVarQueryParameters = new HttpParams({encoder: this.encoder});
    if (balanceZoneId !== undefined && balanceZoneId !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
        <any>balanceZoneId, 'balance_zone_id');
    }
    if (startDate !== undefined && startDate !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
        <any>startDate, 'startDate');
    }
    if (endDate !== undefined && endDate !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
        <any>endDate, 'endDate');
    }
    if (entity !== undefined && entity !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
        <any>entity, 'entity');
    }
    if (layoutId !== undefined && layoutId !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
        <any>layoutId, 'layout_id');
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (api_key) required
    localVarCredential = this.configuration.lookupCredential('api_key');
    if (localVarCredential) {
        localVarHeaders = localVarHeaders.set('X-Auth', localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
        localVarHttpContext = new HttpContext();
    }


    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
        if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
            responseType_ = 'json';
        } else {
            responseType_ = 'blob';
        }
    }

    let localVarPath = `/balance`;
    return this.httpClient.request<Array<Balance>>('get', `${this.configuration.basePath}${localVarPath}`,
        {
            context: localVarHttpContext,
            params: localVarQueryParameters,
            responseType: <any>responseType_,
            withCredentials: this.configuration.withCredentials,
            headers: localVarHeaders,
            observe: observe,
            reportProgress: reportProgress
        }
    );
}

/**
 * Get a list of balance layout columns
 * 
 * @param balanceLayoutId 
 * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
 * @param reportProgress flag to report request and response progress.
 */
public getBalanceLayoutCols(balanceLayoutId?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<BalanceLayoutColumn>>;
public getBalanceLayoutCols(balanceLayoutId?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<BalanceLayoutColumn>>>;
public getBalanceLayoutCols(balanceLayoutId?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<BalanceLayoutColumn>>>;
public getBalanceLayoutCols(balanceLayoutId?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {

    let localVarQueryParameters = new HttpParams({encoder: this.encoder});
    if (balanceLayoutId !== undefined && balanceLayoutId !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
        <any>balanceLayoutId, 'balance_layout_id');
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (api_key) required
    localVarCredential = this.configuration.lookupCredential('api_key');
    if (localVarCredential) {
        localVarHeaders = localVarHeaders.set('X-Auth', localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
        localVarHttpContext = new HttpContext();
    }


    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
        if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
            responseType_ = 'json';
        } else {
            responseType_ = 'blob';
        }
    }

    let localVarPath = `/balance/layouts/columns`;
    return this.httpClient.request<Array<BalanceLayoutColumn>>('get', `${this.configuration.basePath}${localVarPath}`,
        {
            context: localVarHttpContext,
            params: localVarQueryParameters,
            responseType: <any>responseType_,
            withCredentials: this.configuration.withCredentials,
            headers: localVarHeaders,
            observe: observe,
            reportProgress: reportProgress
        }
    );
}

/**
 * Returns all balance layouts
 * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
 * @param reportProgress flag to report request and response progress.
 */
public getBalanceLayoutConfiguration(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<BalanceLayoutConfiguration>>;
public getBalanceLayoutConfiguration(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<BalanceLayoutConfiguration>>>;
public getBalanceLayoutConfiguration(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<BalanceLayoutConfiguration>>>;
public getBalanceLayoutConfiguration(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (api_key) required
    localVarCredential = this.configuration.lookupCredential('api_key');
    if (localVarCredential) {
        localVarHeaders = localVarHeaders.set('X-Auth', localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
        localVarHttpContext = new HttpContext();
    }


    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
        if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
            responseType_ = 'json';
        } else {
            responseType_ = 'blob';
        }
    }

    let localVarPath = `/balance/layouts`;
    return this.httpClient.request<Array<BalanceLayoutConfiguration>>('get', `${this.configuration.basePath}${localVarPath}`,
        {
            context: localVarHttpContext,
            responseType: <any>responseType_,
            withCredentials: this.configuration.withCredentials,
            headers: localVarHeaders,
            observe: observe,
            reportProgress: reportProgress
        }
    );
}

/**
 * Get balance zone\&#39;s simulated balance
 * @param simulationId 
 * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
 * @param reportProgress flag to report request and response progress.
 */
public getBalanceSimulation(simulationId: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<Balance>>;
public getBalanceSimulation(simulationId: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<Balance>>>;
public getBalanceSimulation(simulationId: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<Balance>>>;
public getBalanceSimulation(simulationId: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
    if (simulationId === null || simulationId === undefined) {
        throw new Error('Required parameter simulationId was null or undefined when calling getBalanceSimulation.');
    }

    let localVarQueryParameters = new HttpParams({encoder: this.encoder});
    if (simulationId !== undefined && simulationId !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
        <any>simulationId, 'simulation_id');
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (api_key) required
    localVarCredential = this.configuration.lookupCredential('api_key');
    if (localVarCredential) {
        localVarHeaders = localVarHeaders.set('X-Auth', localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
        localVarHttpContext = new HttpContext();
    }


    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
        if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
            responseType_ = 'json';
        } else {
            responseType_ = 'blob';
        }
    }

    let localVarPath = `/balance/simulation`;
    return this.httpClient.request<Array<Balance>>('get', `${this.configuration.basePath}${localVarPath}`,
        {
            context: localVarHttpContext,
            params: localVarQueryParameters,
            responseType: <any>responseType_,
            withCredentials: this.configuration.withCredentials,
            headers: localVarHeaders,
            observe: observe,
            reportProgress: reportProgress
        }
    );
}

/**
 * Returns Balance Simulation Comparison
 * @param simulationId 
 * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
 * @param reportProgress flag to report request and response progress.
 */
public getBalanceSimulationComparison(simulationId: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<Balance>>;
public getBalanceSimulationComparison(simulationId: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<Balance>>>;
public getBalanceSimulationComparison(simulationId: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<Balance>>>;
public getBalanceSimulationComparison(simulationId: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
    if (simulationId === null || simulationId === undefined) {
        throw new Error('Required parameter simulationId was null or undefined when calling getBalanceSimulationComparison.');
    }

    let localVarQueryParameters = new HttpParams({encoder: this.encoder});
    if (simulationId !== undefined && simulationId !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
        <any>simulationId, 'simulation_id');
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (api_key) required
    localVarCredential = this.configuration.lookupCredential('api_key');
    if (localVarCredential) {
        localVarHeaders = localVarHeaders.set('X-Auth', localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
        localVarHttpContext = new HttpContext();
    }


    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
        if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
            responseType_ = 'json';
        } else {
            responseType_ = 'blob';
        }
    }

    let localVarPath = `/balance/simulation/comparison`;
    return this.httpClient.request<Array<Balance>>('get', `${this.configuration.basePath}${localVarPath}`,
        {
            context: localVarHttpContext,
            params: localVarQueryParameters,
            responseType: <any>responseType_,
            withCredentials: this.configuration.withCredentials,
            headers: localVarHeaders,
            observe: observe,
            reportProgress: reportProgress
        }
    );
}

/**
 * Get balance zone\&#39;s balance
 * @param balanceZoneId 
 * @param startDate 
 * @param endDate 
 * @param entity 
 * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
 * @param reportProgress flag to report request and response progress.
 */
public getBalanceTSO(balanceZoneId: number, startDate: string, endDate: string, entity: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<Balance>>;
public getBalanceTSO(balanceZoneId: number, startDate: string, endDate: string, entity: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<Balance>>>;
public getBalanceTSO(balanceZoneId: number, startDate: string, endDate: string, entity: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<Balance>>>;
public getBalanceTSO(balanceZoneId: number, startDate: string, endDate: string, entity: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
    if (balanceZoneId === null || balanceZoneId === undefined) {
        throw new Error('Required parameter balanceZoneId was null or undefined when calling getBalanceTSO.');
    }
    if (startDate === null || startDate === undefined) {
        throw new Error('Required parameter startDate was null or undefined when calling getBalanceTSO.');
    }
    if (endDate === null || endDate === undefined) {
        throw new Error('Required parameter endDate was null or undefined when calling getBalanceTSO.');
    }
    if (entity === null || entity === undefined) {
        throw new Error('Required parameter entity was null or undefined when calling getBalanceTSO.');
    }

    let localVarQueryParameters = new HttpParams({encoder: this.encoder});
    if (balanceZoneId !== undefined && balanceZoneId !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
        <any>balanceZoneId, 'balance_zone_id');
    }
    if (startDate !== undefined && startDate !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
        <any>startDate, 'startDate');
    }
    if (endDate !== undefined && endDate !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
        <any>endDate, 'endDate');
    }
    if (entity !== undefined && entity !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
        <any>entity, 'entity');
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (api_key) required
    localVarCredential = this.configuration.lookupCredential('api_key');
    if (localVarCredential) {
        localVarHeaders = localVarHeaders.set('X-Auth', localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
        localVarHttpContext = new HttpContext();
    }


    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
        if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
            responseType_ = 'json';
        } else {
            responseType_ = 'blob';
        }
    }

    let localVarPath = `/balance/tso`;
    return this.httpClient.request<Array<Balance>>('get', `${this.configuration.basePath}${localVarPath}`,
        {
            context: localVarHttpContext,
            params: localVarQueryParameters,
            responseType: <any>responseType_,
            withCredentials: this.configuration.withCredentials,
            headers: localVarHeaders,
            observe: observe,
            reportProgress: reportProgress
        }
    );
}

/**
 * Get balance zone\&#39;s virtual balance
 * @param virtualBalanceId 
 * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
 * @param reportProgress flag to report request and response progress.
 */
public getVirtualBalance(virtualBalanceId: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<Balance>>;
public getVirtualBalance(virtualBalanceId: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<Balance>>>;
public getVirtualBalance(virtualBalanceId: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<Balance>>>;
public getVirtualBalance(virtualBalanceId: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
    if (virtualBalanceId === null || virtualBalanceId === undefined) {
        throw new Error('Required parameter virtualBalanceId was null or undefined when calling getVirtualBalance.');
    }

    let localVarQueryParameters = new HttpParams({encoder: this.encoder});
    if (virtualBalanceId !== undefined && virtualBalanceId !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
        <any>virtualBalanceId, 'virtual_balance_id');
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (api_key) required
    localVarCredential = this.configuration.lookupCredential('api_key');
    if (localVarCredential) {
        localVarHeaders = localVarHeaders.set('X-Auth', localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
        localVarHttpContext = new HttpContext();
    }


    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
        if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
            responseType_ = 'json';
        } else {
            responseType_ = 'blob';
        }
    }

    let localVarPath = `/balance/virtual`;
    return this.httpClient.request<Array<Balance>>('get', `${this.configuration.basePath}${localVarPath}`,
        {
            context: localVarHttpContext,
            params: localVarQueryParameters,
            responseType: <any>responseType_,
            withCredentials: this.configuration.withCredentials,
            headers: localVarHeaders,
            observe: observe,
            reportProgress: reportProgress
        }
    );
}

/**
 * Returns all Virtual Balances
 * @param balanceId ID of balance zone to return
 * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
 * @param reportProgress flag to report request and response progress.
 */
public getVirtualBalanceConfiguration(balanceId: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<Simulation>>;
public getVirtualBalanceConfiguration(balanceId: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<Simulation>>>;
public getVirtualBalanceConfiguration(balanceId: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<Simulation>>>;
public getVirtualBalanceConfiguration(balanceId: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
    if (balanceId === null || balanceId === undefined) {
        throw new Error('Required parameter balanceId was null or undefined when calling getVirtualBalanceConfiguration.');
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (api_key) required
    localVarCredential = this.configuration.lookupCredential('api_key');
    if (localVarCredential) {
        localVarHeaders = localVarHeaders.set('X-Auth', localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
        localVarHttpContext = new HttpContext();
    }


    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
        if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
            responseType_ = 'json';
        } else {
            responseType_ = 'blob';
        }
    }

    let localVarPath = `/balance/virtual/configuration/${this.configuration.encodeParam({name: "balanceId", value: balanceId, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: "int64"})}`;
    return this.httpClient.request<Array<Simulation>>('get', `${this.configuration.basePath}${localVarPath}`,
        {
            context: localVarHttpContext,
            responseType: <any>responseType_,
            withCredentials: this.configuration.withCredentials,
            headers: localVarHeaders,
            observe: observe,
            reportProgress: reportProgress
        }
    );
}

/**
 * Deletes a balance simulation
 * @param simulationId 
 * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
 * @param reportProgress flag to report request and response progress.
 */
public removeBalanceSimulation(simulationId: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;
public removeBalanceSimulation(simulationId: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;
public removeBalanceSimulation(simulationId: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;
public removeBalanceSimulation(simulationId: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {
    if (simulationId === null || simulationId === undefined) {
        throw new Error('Required parameter simulationId was null or undefined when calling removeBalanceSimulation.');
    }

    let localVarQueryParameters = new HttpParams({encoder: this.encoder});
    if (simulationId !== undefined && simulationId !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
        <any>simulationId, 'simulation_id');
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (api_key) required
    localVarCredential = this.configuration.lookupCredential('api_key');
    if (localVarCredential) {
        localVarHeaders = localVarHeaders.set('X-Auth', localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
        localVarHttpContext = new HttpContext();
    }


    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
        if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
            responseType_ = 'json';
        } else {
            responseType_ = 'blob';
        }
    }

    let localVarPath = `/balance/simulation/all`;
    return this.httpClient.request<any>('delete', `${this.configuration.basePath}${localVarPath}`,
        {
            context: localVarHttpContext,
            params: localVarQueryParameters,
            responseType: <any>responseType_,
            withCredentials: this.configuration.withCredentials,
            headers: localVarHeaders,
            observe: observe,
            reportProgress: reportProgress
        }
    );
}

/**
 * Deletes a balance virtual
 * @param virtualBalanceId 
 * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
 * @param reportProgress flag to report request and response progress.
 */
public removeVirtualBalance(virtualBalanceId: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;
public removeVirtualBalance(virtualBalanceId: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;
public removeVirtualBalance(virtualBalanceId: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;
public removeVirtualBalance(virtualBalanceId: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {
    if (virtualBalanceId === null || virtualBalanceId === undefined) {
        throw new Error('Required parameter virtualBalanceId was null or undefined when calling removeVirtualBalance.');
    }

    let localVarQueryParameters = new HttpParams({encoder: this.encoder});
    if (virtualBalanceId !== undefined && virtualBalanceId !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
        <any>virtualBalanceId, 'virtual_balance_id');
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (api_key) required
    localVarCredential = this.configuration.lookupCredential('api_key');
    if (localVarCredential) {
        localVarHeaders = localVarHeaders.set('X-Auth', localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
        localVarHttpContext = new HttpContext();
    }


    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
        if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
            responseType_ = 'json';
        } else {
            responseType_ = 'blob';
        }
    }

    let localVarPath = `/balance/virtual/all`;
    return this.httpClient.request<any>('delete', `${this.configuration.basePath}${localVarPath}`,
        {
            context: localVarHttpContext,
            params: localVarQueryParameters,
            responseType: <any>responseType_,
            withCredentials: this.configuration.withCredentials,
            headers: localVarHeaders,
            observe: observe,
            reportProgress: reportProgress
        }
    );
}

/**
 * Set columns for balance layout
 * @param balanceLayoutId 
 * @param balanceLayout Array of BalanceLayout objects to associate with balance zone and legal entity
 * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
 * @param reportProgress flag to report request and response progress.
 */
public setBalanceLayoutCols(balanceLayoutId: number, balanceLayout?: Array<BalanceLayout>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;
public setBalanceLayoutCols(balanceLayoutId: number, balanceLayout?: Array<BalanceLayout>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;
public setBalanceLayoutCols(balanceLayoutId: number, balanceLayout?: Array<BalanceLayout>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;
public setBalanceLayoutCols(balanceLayoutId: number, balanceLayout?: Array<BalanceLayout>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {
    if (balanceLayoutId === null || balanceLayoutId === undefined) {
        throw new Error('Required parameter balanceLayoutId was null or undefined when calling setBalanceLayoutCols.');
    }

    let localVarQueryParameters = new HttpParams({encoder: this.encoder});
    if (balanceLayoutId !== undefined && balanceLayoutId !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
        <any>balanceLayoutId, 'balance_layout_id');
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (api_key) required
    localVarCredential = this.configuration.lookupCredential('api_key');
    if (localVarCredential) {
        localVarHeaders = localVarHeaders.set('X-Auth', localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
        localVarHttpContext = new HttpContext();
    }


    // to determine the Content-Type header
    const consumes: string[] = [
        'application/json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
        localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
        if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
            responseType_ = 'json';
        } else {
            responseType_ = 'blob';
        }
    }

    let localVarPath = `/balance/layouts/columns`;
    return this.httpClient.request<any>('post', `${this.configuration.basePath}${localVarPath}`,
        {
            context: localVarHttpContext,
            body: balanceLayout,
            params: localVarQueryParameters,
            responseType: <any>responseType_,
            withCredentials: this.configuration.withCredentials,
            headers: localVarHeaders,
            observe: observe,
            reportProgress: reportProgress
        }
    );
}

/**
 * Synchronizes a balance simulation
 * @param simulationId 
 * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
 * @param reportProgress flag to report request and response progress.
 */
public syncBalanceSimulation(simulationId: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;
public syncBalanceSimulation(simulationId: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;
public syncBalanceSimulation(simulationId: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;
public syncBalanceSimulation(simulationId: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {
    if (simulationId === null || simulationId === undefined) {
        throw new Error('Required parameter simulationId was null or undefined when calling syncBalanceSimulation.');
    }

    let localVarQueryParameters = new HttpParams({encoder: this.encoder});
    if (simulationId !== undefined && simulationId !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
        <any>simulationId, 'simulation_id');
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (api_key) required
    localVarCredential = this.configuration.lookupCredential('api_key');
    if (localVarCredential) {
        localVarHeaders = localVarHeaders.set('X-Auth', localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
        localVarHttpContext = new HttpContext();
    }


    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
        if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
            responseType_ = 'json';
        } else {
            responseType_ = 'blob';
        }
    }

    let localVarPath = `/balance/simulation/sync`;
    return this.httpClient.request<any>('get', `${this.configuration.basePath}${localVarPath}`,
        {
            context: localVarHttpContext,
            params: localVarQueryParameters,
            responseType: <any>responseType_,
            withCredentials: this.configuration.withCredentials,
            headers: localVarHeaders,
            observe: observe,
            reportProgress: reportProgress
        }
    );
}

/**
 * Synchronizes a balance simulation
 * @param virtualBalanceId 
 * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
 * @param reportProgress flag to report request and response progress.
 */
public syncVirtualBalance(virtualBalanceId: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;
public syncVirtualBalance(virtualBalanceId: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;
public syncVirtualBalance(virtualBalanceId: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;
public syncVirtualBalance(virtualBalanceId: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {
    if (virtualBalanceId === null || virtualBalanceId === undefined) {
        throw new Error('Required parameter virtualBalanceId was null or undefined when calling syncVirtualBalance.');
    }

    let localVarQueryParameters = new HttpParams({encoder: this.encoder});
    if (virtualBalanceId !== undefined && virtualBalanceId !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
        <any>virtualBalanceId, 'virtual_balance_id');
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (api_key) required
    localVarCredential = this.configuration.lookupCredential('api_key');
    if (localVarCredential) {
        localVarHeaders = localVarHeaders.set('X-Auth', localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
        localVarHttpContext = new HttpContext();
    }


    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
        if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
            responseType_ = 'json';
        } else {
            responseType_ = 'blob';
        }
    }

    let localVarPath = `/balance/virtual/sync`;
    return this.httpClient.request<any>('get', `${this.configuration.basePath}${localVarPath}`,
        {
            context: localVarHttpContext,
            params: localVarQueryParameters,
            responseType: <any>responseType_,
            withCredentials: this.configuration.withCredentials,
            headers: localVarHeaders,
            observe: observe,
            reportProgress: reportProgress
        }
    );
}

/**
 * Update a balance layout
 * 
 * @param balanceLayoutConfiguration Balance Layout object to add to master data
 * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
 * @param reportProgress flag to report request and response progress.
 */
public updateBalanceLayoutConfiguration(balanceLayoutConfiguration: BalanceLayoutConfiguration, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<BalanceLayoutConfiguration>;
public updateBalanceLayoutConfiguration(balanceLayoutConfiguration: BalanceLayoutConfiguration, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<BalanceLayoutConfiguration>>;
public updateBalanceLayoutConfiguration(balanceLayoutConfiguration: BalanceLayoutConfiguration, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<BalanceLayoutConfiguration>>;
public updateBalanceLayoutConfiguration(balanceLayoutConfiguration: BalanceLayoutConfiguration, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
    if (balanceLayoutConfiguration === null || balanceLayoutConfiguration === undefined) {
        throw new Error('Required parameter balanceLayoutConfiguration was null or undefined when calling updateBalanceLayoutConfiguration.');
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (api_key) required
    localVarCredential = this.configuration.lookupCredential('api_key');
    if (localVarCredential) {
        localVarHeaders = localVarHeaders.set('X-Auth', localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
        localVarHttpContext = new HttpContext();
    }


    // to determine the Content-Type header
    const consumes: string[] = [
        'application/json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
        localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
        if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
            responseType_ = 'json';
        } else {
            responseType_ = 'blob';
        }
    }

    let localVarPath = `/balance/layouts`;
    return this.httpClient.request<BalanceLayoutConfiguration>('put', `${this.configuration.basePath}${localVarPath}`,
        {
            context: localVarHttpContext,
            body: balanceLayoutConfiguration,
            responseType: <any>responseType_,
            withCredentials: this.configuration.withCredentials,
            headers: localVarHeaders,
            observe: observe,
            reportProgress: reportProgress
        }
    );
}

/**
 * Update balance zone\&#39;s virtual balance
 * @param virtualBalance Virtual balance object to add
 * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
 * @param reportProgress flag to report request and response progress.
 */
public updateVirtualBalance(virtualBalance: VirtualBalance, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<VirtualBalance>;
public updateVirtualBalance(virtualBalance: VirtualBalance, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<VirtualBalance>>;
public updateVirtualBalance(virtualBalance: VirtualBalance, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<VirtualBalance>>;
public updateVirtualBalance(virtualBalance: VirtualBalance, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
    if (virtualBalance === null || virtualBalance === undefined) {
        throw new Error('Required parameter virtualBalance was null or undefined when calling updateVirtualBalance.');
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (api_key) required
    localVarCredential = this.configuration.lookupCredential('api_key');
    if (localVarCredential) {
        localVarHeaders = localVarHeaders.set('X-Auth', localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
        localVarHttpContext = new HttpContext();
    }


    // to determine the Content-Type header
    const consumes: string[] = [
        'application/json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
        localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
    }

    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
        if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
            responseType_ = 'json';
        } else {
            responseType_ = 'blob';
        }
    }

    let localVarPath = `/balance/virtual/configuration`;
    return this.httpClient.request<VirtualBalance>('put', `${this.configuration.basePath}${localVarPath}`,
        {
            context: localVarHttpContext,
            body: virtualBalance,
            responseType: <any>responseType_,
            withCredentials: this.configuration.withCredentials,
            headers: localVarHeaders,
            observe: observe,
            reportProgress: reportProgress
        }
    );
}

/**
 * Get balance zone\&#39;s balance
 * @param balanceZoneId 
 * @param startDate 
 * @param endDate 
 * @param entity 
 * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
 * @param reportProgress flag to report request and response progress.
 */
public getBalanceAdjustmentsTSO(balanceZoneId: number, startDate: string, endDate: string, entity: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<Balance>>;
public getBalanceAdjustmentsTSO(balanceZoneId: number, startDate: string, endDate: string, entity: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<Balance>>>;
public getBalanceAdjustmentsTSO(balanceZoneId: number, startDate: string, endDate: string, entity: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<Balance>>>;
public getBalanceAdjustmentsTSO(balanceZoneId: number, startDate: string, endDate: string, entity: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
    if (balanceZoneId === null || balanceZoneId === undefined) {
        throw new Error('Required parameter balanceZoneId was null or undefined when calling getBalanceAdjustmentsTSO.');
    }
    if (startDate === null || startDate === undefined) {
        throw new Error('Required parameter startDate was null or undefined when calling getBalanceAdjustmentsTSO.');
    }
    if (endDate === null || endDate === undefined) {
        throw new Error('Required parameter endDate was null or undefined when calling getBalanceAdjustmentsTSO.');
    }
    if (entity === null || entity === undefined) {
        throw new Error('Required parameter entity was null or undefined when calling getBalanceAdjustmentsTSO.');
    }

    let localVarQueryParameters = new HttpParams({encoder: this.encoder});
    if (balanceZoneId !== undefined && balanceZoneId !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
        <any>balanceZoneId, 'balance_zone_id');
    }
    if (startDate !== undefined && startDate !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
        <any>startDate, 'startDate');
    }
    if (endDate !== undefined && endDate !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
        <any>endDate, 'endDate');
    }
    if (entity !== undefined && entity !== null) {
      localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
        <any>entity, 'entity');
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (api_key) required
    localVarCredential = this.configuration.lookupCredential('api_key');
    if (localVarCredential) {
        localVarHeaders = localVarHeaders.set('X-Auth', localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
    }

    let localVarHttpContext: HttpContext | undefined = options && options.context;
    if (localVarHttpContext === undefined) {
        localVarHttpContext = new HttpContext();
    }


    let responseType_: 'text' | 'json' | 'blob' = 'json';
    if (localVarHttpHeaderAcceptSelected) {
        if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
            responseType_ = 'text';
        } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
            responseType_ = 'json';
        } else {
            responseType_ = 'blob';
        }
    }

    let localVarPath = `/balance/adjustments/tso`;
    return this.httpClient.request<Array<Balance>>('get', `${this.configuration.basePath}${localVarPath}`,
        {
            context: localVarHttpContext,
            params: localVarQueryParameters,
            responseType: <any>responseType_,
            withCredentials: this.configuration.withCredentials,
            headers: localVarHeaders,
            observe: observe,
            reportProgress: reportProgress
        }
    );
}

    /**
     * Get workflow nomination mode
     * @param balanceZoneId 
     * @param entity 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getWorkflowNomiantionMode(balanceZoneId: number, entity: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<any>>;
    public getWorkflowNomiantionMode(balanceZoneId: number, entity: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<any>>>;
    public getWorkflowNomiantionMode(balanceZoneId: number, entity: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<any>>>;
    public getWorkflowNomiantionMode(balanceZoneId: number, entity: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        if (balanceZoneId === null || balanceZoneId === undefined) {
            throw new Error('Required parameter balanceZoneId was null or undefined when calling getWorkflowNomiantionMode.');
        }
        if (entity === null || entity === undefined) {
            throw new Error('Required parameter entity was null or undefined when calling getWorkflowNomiantionMode.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (balanceZoneId !== undefined && balanceZoneId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>balanceZoneId, 'balance_zone_id');
        }
        if (entity !== undefined && entity !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>entity, 'entity');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (api_key) required
        localVarCredential = this.configuration.lookupCredential('api_key');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('X-Auth', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/balance/workflow/nomination/mode`;
        return this.httpClient.request<Array<any>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }


}
