/**
 * SLG API
 * REST API for the New SLG (Novo Sistema de Logística de Gás)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../../encoder';
import { Observable }                                        from 'rxjs';


// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../../variables';
import { Configuration }                                     from '../../configuration';
import { ProfileService } from './sharedServices/auth.service';



@Injectable({
  providedIn: 'root'
})
export class OptimizationService {

    protected basePath = BASE_PATH;
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string|string[], @Optional() configuration: Configuration,private profileService : ProfileService) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (Array.isArray(basePath) && basePath.length > 0) {
                basePath = basePath[0];
            }

            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();

        
    }


    // @ts-ignore
    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, (value as Date).toISOString().substr(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

     /**
     * Add operation constraints
     * @param scenarioId 
     * @param balanceOperation Array of BalanceOperation objects to add
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
     public addOperationRestrictionsOptimizationScenario(scenarioId: number, balanceOperation: Array<any>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<any>>;
     public addOperationRestrictionsOptimizationScenario(scenarioId: number, balanceOperation: Array<any>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<any>>>;
     public addOperationRestrictionsOptimizationScenario(scenarioId: number, balanceOperation: Array<any>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<any>>>;
     public addOperationRestrictionsOptimizationScenario(scenarioId: number, balanceOperation: Array<any>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
         if (scenarioId === null || scenarioId === undefined) {
             throw new Error('Required parameter scenarioId was null or undefined when calling addOperationRestrictionsOptimizationScenario.');
         }
         if (balanceOperation === null || balanceOperation === undefined) {
             throw new Error('Required parameter balanceOperation was null or undefined when calling addOperationRestrictionsOptimizationScenario.');
         }
 
         let localVarQueryParameters = new HttpParams({encoder: this.encoder});
         if (scenarioId !== undefined && scenarioId !== null) {
           localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
             <any>scenarioId, 'scenario_id');
         }
 
         let localVarHeaders = this.defaultHeaders;
 
         let localVarCredential: string | undefined;
         // authentication (api_key) required
         localVarCredential = this.configuration.lookupCredential('api_key');
         if (localVarCredential) {
             localVarHeaders = localVarHeaders.set('X-Auth', localVarCredential);
         }
 
         let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
         if (localVarHttpHeaderAcceptSelected === undefined) {
             // to determine the Accept header
             const httpHeaderAccepts: string[] = [
                 'application/json'
             ];
             localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         }
         if (localVarHttpHeaderAcceptSelected !== undefined) {
             localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
         }
 
         let localVarHttpContext: HttpContext | undefined = options && options.context;
         if (localVarHttpContext === undefined) {
             localVarHttpContext = new HttpContext();
         }
 
 
         // to determine the Content-Type header
         const consumes: string[] = [
             'application/json'
         ];
         const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
         if (httpContentTypeSelected !== undefined) {
             localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
         }
 
         let responseType_: 'text' | 'json' | 'blob' = 'json';
         if (localVarHttpHeaderAcceptSelected) {
             if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                 responseType_ = 'text';
             } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                 responseType_ = 'json';
             } else {
                 responseType_ = 'blob';
             }
         }
 
         let localVarPath = `/optimization/add_operation_constraints`;
         return this.httpClient.request<Array<any>>('post', `${this.configuration.basePath}${localVarPath}`,
             {
                 context: localVarHttpContext,
                 body: balanceOperation,
                 params: localVarQueryParameters,
                 responseType: <any>responseType_,
                 withCredentials: this.configuration.withCredentials,
                 headers: localVarHeaders,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
 
 /**
     * Add operation restriction
     * @param stockParametrizationOptimizationScenario Array of StockParametrizationOptimizationScenario objects to add
     * @param scenarioId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
 public addStockParametrizationOptimizationScenario(stockParametrizationOptimizationScenario: Array<any>, scenarioId?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any>;
 public addStockParametrizationOptimizationScenario(stockParametrizationOptimizationScenario: Array<any>, scenarioId?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<any>>;
 public addStockParametrizationOptimizationScenario(stockParametrizationOptimizationScenario: Array<any>, scenarioId?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<any>>;
 public addStockParametrizationOptimizationScenario(stockParametrizationOptimizationScenario: Array<any>, scenarioId?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
     if (stockParametrizationOptimizationScenario === null || stockParametrizationOptimizationScenario === undefined) {
         throw new Error('Required parameter stockParametrizationOptimizationScenario was null or undefined when calling addStockParametrizationOptimizationScenario.');
     }

     let localVarQueryParameters = new HttpParams({encoder: this.encoder});
     if (scenarioId !== undefined && scenarioId !== null) {
       localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
         <any>scenarioId, 'scenario_id');
     }

     let localVarHeaders = this.defaultHeaders;

     let localVarCredential: string | undefined;
     // authentication (api_key) required
     localVarCredential = this.configuration.lookupCredential('api_key');
     if (localVarCredential) {
         localVarHeaders = localVarHeaders.set('X-Auth', localVarCredential);
     }

     let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
     if (localVarHttpHeaderAcceptSelected === undefined) {
         // to determine the Accept header
         const httpHeaderAccepts: string[] = [
             'application/json'
         ];
         localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
     }
     if (localVarHttpHeaderAcceptSelected !== undefined) {
         localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
     }

     let localVarHttpContext: HttpContext | undefined = options && options.context;
     if (localVarHttpContext === undefined) {
         localVarHttpContext = new HttpContext();
     }


     // to determine the Content-Type header
     const consumes: string[] = [
         'application/json'
     ];
     const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
     if (httpContentTypeSelected !== undefined) {
         localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
     }

     let responseType_: 'text' | 'json' | 'blob' = 'json';
     if (localVarHttpHeaderAcceptSelected) {
         if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
             responseType_ = 'text';
         } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
             responseType_ = 'json';
         } else {
             responseType_ = 'blob';
         }
     }

     let localVarPath = `/optimization/stock_rules`;
     return this.httpClient.request<any>('post', `${this.configuration.basePath}${localVarPath}`,
         {
             context: localVarHttpContext,
             body: stockParametrizationOptimizationScenario,
             params: localVarQueryParameters,
             responseType: <any>responseType_,
             withCredentials: this.configuration.withCredentials,
             headers: localVarHeaders,
             observe: observe,
             reportProgress: reportProgress
         }
     );
 }
 
     /**
      * Create optimization scenario
      * @param optimizationScenario Optimization Scenario object to add
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public createOptimizationScenario(optimizationScenario: any, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any>;
     public createOptimizationScenario(optimizationScenario: any, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<any>>;
     public createOptimizationScenario(optimizationScenario: any, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<any>>;
     public createOptimizationScenario(optimizationScenario: any, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
         if (optimizationScenario === null || optimizationScenario === undefined) {
             throw new Error('Required parameter optimizationScenario was null or undefined when calling createOptimizationScenario.');
         }
 
         let localVarHeaders = this.defaultHeaders;
 
         let localVarCredential: string | undefined;
         // authentication (api_key) required
         localVarCredential = this.configuration.lookupCredential('api_key');
         if (localVarCredential) {
             localVarHeaders = localVarHeaders.set('X-Auth', localVarCredential);
         }
 
         let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
         if (localVarHttpHeaderAcceptSelected === undefined) {
             // to determine the Accept header
             const httpHeaderAccepts: string[] = [
                 'application/json'
             ];
             localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         }
         if (localVarHttpHeaderAcceptSelected !== undefined) {
             localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
         }
 
         let localVarHttpContext: HttpContext | undefined = options && options.context;
         if (localVarHttpContext === undefined) {
             localVarHttpContext = new HttpContext();
         }
 
 
         // to determine the Content-Type header
         const consumes: string[] = [
             'application/json'
         ];
         const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
         if (httpContentTypeSelected !== undefined) {
             localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
         }
 
         let responseType_: 'text' | 'json' | 'blob' = 'json';
         if (localVarHttpHeaderAcceptSelected) {
             if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                 responseType_ = 'text';
             } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                 responseType_ = 'json';
             } else {
                 responseType_ = 'blob';
             }
         }
 
         let localVarPath = `/optimization/scenario`;
         return this.httpClient.request<any>('post', `${this.configuration.basePath}${localVarPath}`,
             {
                 context: localVarHttpContext,
                 body: optimizationScenario,
                 responseType: <any>responseType_,
                 withCredentials: this.configuration.withCredentials,
                 headers: localVarHeaders,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
 
     /**
      * Execute optimization scenario
      * @param scenarioId 
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public executeOptimizationScenario(scenarioId: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<{ [key: string]: any; }>;
     public executeOptimizationScenario(scenarioId: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<{ [key: string]: any; }>>;
     public executeOptimizationScenario(scenarioId: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<{ [key: string]: any; }>>;
     public executeOptimizationScenario(scenarioId: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
         if (scenarioId === null || scenarioId === undefined) {
             throw new Error('Required parameter scenarioId was null or undefined when calling executeOptimizationScenario.');
         }
 
         let localVarQueryParameters = new HttpParams({encoder: this.encoder});
         if (scenarioId !== undefined && scenarioId !== null) {
           localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
             <any>scenarioId, 'scenario_id');
         }
 
         let localVarHeaders = this.defaultHeaders;
 
         let localVarCredential: string | undefined;
         // authentication (api_key) required
         localVarCredential = this.configuration.lookupCredential('api_key');
         if (localVarCredential) {
             localVarHeaders = localVarHeaders.set('X-Auth', localVarCredential);
         }
 
         let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
         if (localVarHttpHeaderAcceptSelected === undefined) {
             // to determine the Accept header
             const httpHeaderAccepts: string[] = [
                 'application/json'
             ];
             localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         }
         if (localVarHttpHeaderAcceptSelected !== undefined) {
             localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
         }
 
         let localVarHttpContext: HttpContext | undefined = options && options.context;
         if (localVarHttpContext === undefined) {
             localVarHttpContext = new HttpContext();
         }
 
 
         let responseType_: 'text' | 'json' | 'blob' = 'json';
         if (localVarHttpHeaderAcceptSelected) {
             if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                 responseType_ = 'text';
             } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                 responseType_ = 'json';
             } else {
                 responseType_ = 'blob';
             }
         }
 
         let localVarPath = `/optimization/execute_scenario`;
         return this.httpClient.request<{ [key: string]: any; }>('get', `${this.configuration.basePath}${localVarPath}`,
             {
                 context: localVarHttpContext,
                 params: localVarQueryParameters,
                 responseType: <any>responseType_,
                 withCredentials: this.configuration.withCredentials,
                 headers: localVarHeaders,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
 
     /**
      * Execute optimization scenario
      * @param balanceZoneId 
      * @param startDate 
      * @param endDate 
      * @param scenarioId 
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public getOperationRestrictionsOptimizationScenario(balanceZoneId?: number, startDate?: string, endDate?: string, scenarioId?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<{ [key: string]: any; }>;
     public getOperationRestrictionsOptimizationScenario(balanceZoneId?: number, startDate?: string, endDate?: string, scenarioId?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<{ [key: string]: any; }>>;
     public getOperationRestrictionsOptimizationScenario(balanceZoneId?: number, startDate?: string, endDate?: string, scenarioId?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<{ [key: string]: any; }>>;
     public getOperationRestrictionsOptimizationScenario(balanceZoneId?: number, startDate?: string, endDate?: string, scenarioId?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
 
         let localVarQueryParameters = new HttpParams({encoder: this.encoder});
         if (balanceZoneId !== undefined && balanceZoneId !== null) {
           localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
             <any>balanceZoneId, 'balance_zone_id');
         }
         if (startDate !== undefined && startDate !== null) {
           localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
             <any>startDate, 'start_date');
         }
         if (endDate !== undefined && endDate !== null) {
           localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
             <any>endDate, 'end_date');
         }
         if (scenarioId !== undefined && scenarioId !== null) {
           localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
             <any>scenarioId, 'scenario_id');
         }
 
         let localVarHeaders = this.defaultHeaders;
 
         let localVarCredential: string | undefined;
         // authentication (api_key) required
         localVarCredential = this.configuration.lookupCredential('api_key');
         if (localVarCredential) {
             localVarHeaders = localVarHeaders.set('X-Auth', localVarCredential);
         }
 
         let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
         if (localVarHttpHeaderAcceptSelected === undefined) {
             // to determine the Accept header
             const httpHeaderAccepts: string[] = [
                 'application/json'
             ];
             localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         }
         if (localVarHttpHeaderAcceptSelected !== undefined) {
             localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
         }
 
         let localVarHttpContext: HttpContext | undefined = options && options.context;
         if (localVarHttpContext === undefined) {
             localVarHttpContext = new HttpContext();
         }
 
 
         let responseType_: 'text' | 'json' | 'blob' = 'json';
         if (localVarHttpHeaderAcceptSelected) {
             if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                 responseType_ = 'text';
             } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                 responseType_ = 'json';
             } else {
                 responseType_ = 'blob';
             }
         }
 
         let localVarPath = `/optimization/operation_constraints`;
         return this.httpClient.request<{ [key: string]: any; }>('get', `${this.configuration.basePath}${localVarPath}`,
             {
                 context: localVarHttpContext,
                 params: localVarQueryParameters,
                 responseType: <any>responseType_,
                 withCredentials: this.configuration.withCredentials,
                 headers: localVarHeaders,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
 
     /**
      * Returns all optimization scenarios
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public getOptimizationScenarios(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<any>>;
     public getOptimizationScenarios(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<any>>>;
     public getOptimizationScenarios(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<any>>>;
     public getOptimizationScenarios(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
 
         let localVarHeaders = this.defaultHeaders;
 
         let localVarCredential: string | undefined;
         // authentication (api_key) required
         localVarCredential = this.configuration.lookupCredential('api_key');
         if (localVarCredential) {
             localVarHeaders = localVarHeaders.set('X-Auth', localVarCredential);
         }
 
         let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
         if (localVarHttpHeaderAcceptSelected === undefined) {
             // to determine the Accept header
             const httpHeaderAccepts: string[] = [
                 'application/json'
             ];
             localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         }
         if (localVarHttpHeaderAcceptSelected !== undefined) {
             localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
         }
 
         let localVarHttpContext: HttpContext | undefined = options && options.context;
         if (localVarHttpContext === undefined) {
             localVarHttpContext = new HttpContext();
         }
 
 
         let responseType_: 'text' | 'json' | 'blob' = 'json';
         if (localVarHttpHeaderAcceptSelected) {
             if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                 responseType_ = 'text';
             } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                 responseType_ = 'json';
             } else {
                 responseType_ = 'blob';
             }
         }
 
         let localVarPath = `/optimization/scenario`;
         return this.httpClient.request<Array<any>>('get', `${this.configuration.basePath}${localVarPath}`,
             {
                 context: localVarHttpContext,
                 responseType: <any>responseType_,
                 withCredentials: this.configuration.withCredentials,
                 headers: localVarHeaders,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
 
     /**
      * Get stock rules optimization scenario
      * @param balanceZoneId 
      * @param scenarioId 
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public getStockRulesOptimizationScenario(balanceZoneId?: number, scenarioId?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<{ [key: string]: any; }>;
     public getStockRulesOptimizationScenario(balanceZoneId?: number, scenarioId?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<{ [key: string]: any; }>>;
     public getStockRulesOptimizationScenario(balanceZoneId?: number, scenarioId?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<{ [key: string]: any; }>>;
     public getStockRulesOptimizationScenario(balanceZoneId?: number, scenarioId?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
 
         let localVarQueryParameters = new HttpParams({encoder: this.encoder});
         if (balanceZoneId !== undefined && balanceZoneId !== null) {
           localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
             <any>balanceZoneId, 'balance_zone_id');
         }
         if (scenarioId !== undefined && scenarioId !== null) {
           localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
             <any>scenarioId, 'scenario_id');
         }
 
         let localVarHeaders = this.defaultHeaders;
 
         let localVarCredential: string | undefined;
         // authentication (api_key) required
         localVarCredential = this.configuration.lookupCredential('api_key');
         if (localVarCredential) {
             localVarHeaders = localVarHeaders.set('X-Auth', localVarCredential);
         }
 
         let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
         if (localVarHttpHeaderAcceptSelected === undefined) {
             // to determine the Accept header
             const httpHeaderAccepts: string[] = [
                 'application/json'
             ];
             localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         }
         if (localVarHttpHeaderAcceptSelected !== undefined) {
             localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
         }
 
         let localVarHttpContext: HttpContext | undefined = options && options.context;
         if (localVarHttpContext === undefined) {
             localVarHttpContext = new HttpContext();
         }
 
 
         let responseType_: 'text' | 'json' | 'blob' = 'json';
         if (localVarHttpHeaderAcceptSelected) {
             if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                 responseType_ = 'text';
             } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                 responseType_ = 'json';
             } else {
                 responseType_ = 'blob';
             }
         }
 
         let localVarPath = `/optimization/stock_rules`;
         return this.httpClient.request<{ [key: string]: any; }>('get', `${this.configuration.basePath}${localVarPath}`,
             {
                 context: localVarHttpContext,
                 params: localVarQueryParameters,
                 responseType: <any>responseType_,
                 withCredentials: this.configuration.withCredentials,
                 headers: localVarHeaders,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
 
     /**
      * Deletes a optimization scenario
      * @param optimizationScenarioId 
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public removeOptimizationScenario(optimizationScenarioId: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;
     public removeOptimizationScenario(optimizationScenarioId: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;
     public removeOptimizationScenario(optimizationScenarioId: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;
     public removeOptimizationScenario(optimizationScenarioId: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {
         if (optimizationScenarioId === null || optimizationScenarioId === undefined) {
             throw new Error('Required parameter optimizationScenarioId was null or undefined when calling removeOptimizationScenario.');
         }
 
         let localVarQueryParameters = new HttpParams({encoder: this.encoder});
         if (optimizationScenarioId !== undefined && optimizationScenarioId !== null) {
           localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
             <any>optimizationScenarioId, 'optimization_scenario_id');
         }
 
         let localVarHeaders = this.defaultHeaders;
 
         let localVarCredential: string | undefined;
         // authentication (api_key) required
         localVarCredential = this.configuration.lookupCredential('api_key');
         if (localVarCredential) {
             localVarHeaders = localVarHeaders.set('X-Auth', localVarCredential);
         }
 
         let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
         if (localVarHttpHeaderAcceptSelected === undefined) {
             // to determine the Accept header
             const httpHeaderAccepts: string[] = [
             ];
             localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         }
         if (localVarHttpHeaderAcceptSelected !== undefined) {
             localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
         }
 
         let localVarHttpContext: HttpContext | undefined = options && options.context;
         if (localVarHttpContext === undefined) {
             localVarHttpContext = new HttpContext();
         }
 
 
         let responseType_: 'text' | 'json' | 'blob' = 'json';
         if (localVarHttpHeaderAcceptSelected) {
             if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                 responseType_ = 'text';
             } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                 responseType_ = 'json';
             } else {
                 responseType_ = 'blob';
             }
         }
 
         let localVarPath = `/optimization/scenario`;
         return this.httpClient.request<any>('delete', `${this.configuration.basePath}${localVarPath}`,
             {
                 context: localVarHttpContext,
                 params: localVarQueryParameters,
                 responseType: <any>responseType_,
                 withCredentials: this.configuration.withCredentials,
                 headers: localVarHeaders,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
 
     /**
      * Update optimization scenario
      * 
      * @param optimizationScenario Optimization Scenario object to add
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public updateOptimizationScenario(optimizationScenario: any, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any>;
     public updateOptimizationScenario(optimizationScenario: any, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<any>>;
     public updateOptimizationScenario(optimizationScenario: any, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<any>>;
     public updateOptimizationScenario(optimizationScenario: any, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
         if (optimizationScenario === null || optimizationScenario === undefined) {
             throw new Error('Required parameter optimizationScenario was null or undefined when calling updateOptimizationScenario.');
         }
 
         let localVarHeaders = this.defaultHeaders;
 
         let localVarCredential: string | undefined;
         // authentication (api_key) required
         localVarCredential = this.configuration.lookupCredential('api_key');
         if (localVarCredential) {
             localVarHeaders = localVarHeaders.set('X-Auth', localVarCredential);
         }
 
         let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
         if (localVarHttpHeaderAcceptSelected === undefined) {
             // to determine the Accept header
             const httpHeaderAccepts: string[] = [
                 'application/json'
             ];
             localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         }
         if (localVarHttpHeaderAcceptSelected !== undefined) {
             localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
         }
 
         let localVarHttpContext: HttpContext | undefined = options && options.context;
         if (localVarHttpContext === undefined) {
             localVarHttpContext = new HttpContext();
         }
 
 
         // to determine the Content-Type header
         const consumes: string[] = [
             'application/json'
         ];
         const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
         if (httpContentTypeSelected !== undefined) {
             localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
         }
 
         let responseType_: 'text' | 'json' | 'blob' = 'json';
         if (localVarHttpHeaderAcceptSelected) {
             if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                 responseType_ = 'text';
             } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                 responseType_ = 'json';
             } else {
                 responseType_ = 'blob';
             }
         }
 
         let localVarPath = `/optimization/scenario`;
         return this.httpClient.request<any>('put', `${this.configuration.basePath}${localVarPath}`,
             {
                 context: localVarHttpContext,
                 body: optimizationScenario,
                 responseType: <any>responseType_,
                 withCredentials: this.configuration.withCredentials,
                 headers: localVarHeaders,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
 
 }
 