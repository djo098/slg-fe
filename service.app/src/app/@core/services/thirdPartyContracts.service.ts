/**
 * SLG API
 * REST API for the New SLG (Novo Sistema de Logística de Gás)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from "@angular/core";
import {
  HttpClient,
  HttpHeaders,
  HttpParams,
  HttpResponse,
  HttpEvent,
  HttpParameterCodec,
  HttpContext,
} from "@angular/common/http";
import { CustomHttpParameterCodec } from "../../encoder";
import { Observable } from "rxjs";

// @ts-ignore
import { PhysicalGasSwapContract } from "../schemas/physicalGasSwapContract";
// @ts-ignore
import { ThirdPartyContract } from "../schemas/thirdPartyContract";
// @ts-ignore
import { ThirdPartyOperation } from "../schemas/thirdPartyOperation";

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS } from "../../variables";
import { Configuration } from "../../configuration";
import { ProfileService } from "./sharedServices/auth.service";

@Injectable({
  providedIn: "root",
})
export class ThirdPartyContractsService {
  protected basePath = BASE_PATH;
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();
  public encoder: HttpParameterCodec;

  constructor(
    protected httpClient: HttpClient,
    @Optional() @Inject(BASE_PATH) basePath: string | string[],
    @Optional() configuration: Configuration,
    private profileService: ProfileService
  ) {
    if (configuration) {
      this.configuration = configuration;
    }
    if (typeof this.configuration.basePath !== "string") {
      if (Array.isArray(basePath) && basePath.length > 0) {
        basePath = basePath[0];
      }

      if (typeof basePath !== "string") {
        basePath = this.basePath;
      }
      this.configuration.basePath = basePath;
    }
    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();


  }

  // @ts-ignore
  private addToHttpParams(
    httpParams: HttpParams,
    value: any,
    key?: string
  ): HttpParams {
    if (typeof value === "object" && value instanceof Date === false) {
      httpParams = this.addToHttpParamsRecursive(httpParams, value);
    } else {
      httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
    }
    return httpParams;
  }

  private addToHttpParamsRecursive(
    httpParams: HttpParams,
    value?: any,
    key?: string
  ): HttpParams {
    if (value == null) {
      return httpParams;
    }

    if (typeof value === "object") {
      if (Array.isArray(value)) {
        (value as any[]).forEach(
          (elem) =>
            (httpParams = this.addToHttpParamsRecursive(httpParams, elem, key))
        );
      } else if (value instanceof Date) {
        if (key != null) {
          httpParams = httpParams.append(
            key,
            (value as Date).toISOString().substr(0, 10)
          );
        } else {
          throw Error("key may not be null if value is Date");
        }
      } else {
        Object.keys(value).forEach(
          (k) =>
            (httpParams = this.addToHttpParamsRecursive(
              httpParams,
              value[k],
              key != null ? `${key}.${k}` : k
            ))
        );
      }
    } else if (key != null) {
      httpParams = httpParams.append(key, value);
    } else {
      throw Error("key may not be null if value is not object or array");
    }
    return httpParams;
  }

  /**
   * Add a new gas swap contract
   *
   * @param physicalGasSwapContract Physical Gas Swap Contract object to add
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public addGasSwapContract(
    physicalGasSwapContract: PhysicalGasSwapContract,
    observe?: "body",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<PhysicalGasSwapContract>;
  public addGasSwapContract(
    physicalGasSwapContract: PhysicalGasSwapContract,
    observe?: "response",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<HttpResponse<PhysicalGasSwapContract>>;
  public addGasSwapContract(
    physicalGasSwapContract: PhysicalGasSwapContract,
    observe?: "events",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<HttpEvent<PhysicalGasSwapContract>>;
  public addGasSwapContract(
    physicalGasSwapContract: PhysicalGasSwapContract,
    observe: any = "body",
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<any> {
    if (
      physicalGasSwapContract === null ||
      physicalGasSwapContract === undefined
    ) {
      throw new Error(
        "Required parameter physicalGasSwapContract was null or undefined when calling addGasSwapContract."
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (api_key) required
    localVarCredential = this.configuration.lookupCredential("api_key");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("X-Auth", localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ["application/json"];
      localVarHttpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        "Accept",
        localVarHttpHeaderAcceptSelected
      );
    }

    let localVarHttpContext: HttpContext | undefined =
      options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    // to determine the Content-Type header
    const consumes: string[] = ["application/json"];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        "Content-Type",
        httpContentTypeSelected
      );
    }

    let responseType_: "text" | "json" | "blob" = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (
        this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)
      ) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }

    let localVarPath = `/contracts/third_party/gas_swaps`;
    return this.httpClient.request<PhysicalGasSwapContract>(
      "post",
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        body: physicalGasSwapContract,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Add a new third party contract
   * @param contractType
   * @param thirdPartyContract ThirdPartyContract object to add
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public addThirdPartyContractVirtual(
    contractType: string,
    thirdPartyContract: ThirdPartyContract,
    observe?: "body",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<Array<ThirdPartyContract>>;
  public addThirdPartyContractVirtual(
    contractType: string,
    thirdPartyContract: ThirdPartyContract,
    observe?: "response",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<HttpResponse<Array<ThirdPartyContract>>>;
  public addThirdPartyContractVirtual(
    contractType: string,
    thirdPartyContract: ThirdPartyContract,
    observe?: "events",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<HttpEvent<Array<ThirdPartyContract>>>;
  public addThirdPartyContractVirtual(
    contractType: string,
    thirdPartyContract: ThirdPartyContract,
    observe: any = "body",
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<any> {
    if (contractType === null || contractType === undefined) {
      throw new Error(
        "Required parameter contractType was null or undefined when calling addThirdPartyContractVirtual."
      );
    }
    if (thirdPartyContract === null || thirdPartyContract === undefined) {
      throw new Error(
        "Required parameter thirdPartyContract was null or undefined when calling addThirdPartyContractVirtual."
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (contractType !== undefined && contractType !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>contractType,
        "contract_type"
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (api_key) required
    localVarCredential = this.configuration.lookupCredential("api_key");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("X-Auth", localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ["application/json"];
      localVarHttpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        "Accept",
        localVarHttpHeaderAcceptSelected
      );
    }

    let localVarHttpContext: HttpContext | undefined =
      options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    // to determine the Content-Type header
    const consumes: string[] = ["application/json"];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        "Content-Type",
        httpContentTypeSelected
      );
    }

    let responseType_: "text" | "json" | "blob" = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (
        this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)
      ) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }

    let localVarPath = `/contracts/virtual/third_party`;
    return this.httpClient.request<Array<ThirdPartyContract>>(
      "post",
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        body: thirdPartyContract,
        params: localVarQueryParameters,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Returns all third-party contracts virtual
   * @param contractType
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getAllThirdPartyContractsVirtual(
    contractType: string,
    observe?: "body",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<Array<ThirdPartyContract>>;
  public getAllThirdPartyContractsVirtual(
    contractType: string,
    observe?: "response",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<HttpResponse<Array<ThirdPartyContract>>>;
  public getAllThirdPartyContractsVirtual(
    contractType: string,
    observe?: "events",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<HttpEvent<Array<ThirdPartyContract>>>;
  public getAllThirdPartyContractsVirtual(
    contractType: string,
    observe: any = "body",
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<any> {
    if (contractType === null || contractType === undefined) {
      throw new Error(
        "Required parameter contractType was null or undefined when calling getAllThirdPartyContractsVirtual."
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (contractType !== undefined && contractType !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>contractType,
        "contract_type"
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (api_key) required
    localVarCredential = this.configuration.lookupCredential("api_key");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("X-Auth", localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ["application/json"];
      localVarHttpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        "Accept",
        localVarHttpHeaderAcceptSelected
      );
    }

    let localVarHttpContext: HttpContext | undefined =
      options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: "text" | "json" | "blob" = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (
        this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)
      ) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }

    let localVarPath = `/contracts/virtual/third_party/all`;
    return this.httpClient.request<Array<ThirdPartyContract>>(
      "get",
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        params: localVarQueryParameters,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Returns all ccgt contracts
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getCCGTContracts(
    observe?: "body",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<Array<ThirdPartyContract>>;
  public getCCGTContracts(
    observe?: "response",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<HttpResponse<Array<ThirdPartyContract>>>;
  public getCCGTContracts(
    observe?: "events",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<HttpEvent<Array<ThirdPartyContract>>>;
  public getCCGTContracts(
    observe: any = "body",
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<any> {
    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (api_key) required
    localVarCredential = this.configuration.lookupCredential("api_key");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("X-Auth", localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ["application/json"];
      localVarHttpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        "Accept",
        localVarHttpHeaderAcceptSelected
      );
    }

    let localVarHttpContext: HttpContext | undefined =
      options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: "text" | "json" | "blob" = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (
        this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)
      ) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }

    let localVarPath = `/contracts/third_party/ccgt`;
    return this.httpClient.request<Array<ThirdPartyContract>>(
      "get",
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Obtain third-party physical swap operations files for submission in TSO platform
   * @param contractCode
   * @param startDate
   * @param endDate
   * @param fileType
   * @param balanceZoneId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getFilePhysicalGasSwapsTSO(
    contractCode: string,
    startDate: string,
    endDate: string,
    fileType: string,
    balanceZoneId: number,
    observe?: "body",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<Array<{ [key: string]: any }>>;
  public getFilePhysicalGasSwapsTSO(
    contractCode: string,
    startDate: string,
    endDate: string,
    fileType: string,
    balanceZoneId: number,
    observe?: "response",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<HttpResponse<Array<{ [key: string]: any }>>>;
  public getFilePhysicalGasSwapsTSO(
    contractCode: string,
    startDate: string,
    endDate: string,
    fileType: string,
    balanceZoneId: number,
    observe?: "events",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<HttpEvent<Array<{ [key: string]: any }>>>;
  public getFilePhysicalGasSwapsTSO(
    contractCode: string,
    startDate: string,
    endDate: string,
    fileType: string,
    balanceZoneId: number,
    observe: any = "body",
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<any> {
    if (contractCode === null || contractCode === undefined) {
      throw new Error(
        "Required parameter contractCode was null or undefined when calling getFilePhysicalGasSwapsTSO."
      );
    }
    if (startDate === null || startDate === undefined) {
      throw new Error(
        "Required parameter startDate was null or undefined when calling getFilePhysicalGasSwapsTSO."
      );
    }
    if (endDate === null || endDate === undefined) {
      throw new Error(
        "Required parameter endDate was null or undefined when calling getFilePhysicalGasSwapsTSO."
      );
    }
    if (fileType === null || fileType === undefined) {
      throw new Error(
        "Required parameter fileType was null or undefined when calling getFilePhysicalGasSwapsTSO."
      );
    }
    if (balanceZoneId === null || balanceZoneId === undefined) {
      throw new Error(
        "Required parameter balanceZoneId was null or undefined when calling getFilePhysicalGasSwapsTSO."
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (contractCode !== undefined && contractCode !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>contractCode,
        "contract_code"
      );
    }
    if (startDate !== undefined && startDate !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>startDate,
        "startDate"
      );
    }
    if (endDate !== undefined && endDate !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>endDate,
        "endDate"
      );
    }
    if (fileType !== undefined && fileType !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>fileType,
        "fileType"
      );
    }
    if (balanceZoneId !== undefined && balanceZoneId !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>balanceZoneId,
        "balance_zone_id"
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (api_key) required
    localVarCredential = this.configuration.lookupCredential("api_key");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("X-Auth", localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ["application/json"];
      localVarHttpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        "Accept",
        localVarHttpHeaderAcceptSelected
      );
    }

    let localVarHttpContext: HttpContext | undefined =
      options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: "text" | "json" | "blob" = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (
        this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)
      ) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }

    let localVarPath = `/contracts/third_party/gas_swaps/tso_file`;
    return this.httpClient.request<Array<{ [key: string]: any }>>(
      "get",
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        params: localVarQueryParameters,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Obtain third-party physical operations files for submission in TSO platform
   * @param contractId
   * @param startDate
   * @param endDate
   * @param fileType
   * @param balanceZoneId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getFileThirdPartyTSO(
    contractId: number,
    startDate: string,
    endDate: string,
    fileType: string,
    balanceZoneId: number,
    observe?: "body",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<Array<{ [key: string]: any }>>;
  public getFileThirdPartyTSO(
    contractId: number,
    startDate: string,
    endDate: string,
    fileType: string,
    balanceZoneId: number,
    observe?: "response",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<HttpResponse<Array<{ [key: string]: any }>>>;
  public getFileThirdPartyTSO(
    contractId: number,
    startDate: string,
    endDate: string,
    fileType: string,
    balanceZoneId: number,
    observe?: "events",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<HttpEvent<Array<{ [key: string]: any }>>>;
  public getFileThirdPartyTSO(
    contractId: number,
    startDate: string,
    endDate: string,
    fileType: string,
    balanceZoneId: number,
    observe: any = "body",
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<any> {
    if (contractId === null || contractId === undefined) {
      throw new Error(
        "Required parameter contractId was null or undefined when calling getFileThirdPartyTSO."
      );
    }
    if (startDate === null || startDate === undefined) {
      throw new Error(
        "Required parameter startDate was null or undefined when calling getFileThirdPartyTSO."
      );
    }
    if (endDate === null || endDate === undefined) {
      throw new Error(
        "Required parameter endDate was null or undefined when calling getFileThirdPartyTSO."
      );
    }
    if (fileType === null || fileType === undefined) {
      throw new Error(
        "Required parameter fileType was null or undefined when calling getFileThirdPartyTSO."
      );
    }
    if (balanceZoneId === null || balanceZoneId === undefined) {
      throw new Error(
        "Required parameter balanceZoneId was null or undefined when calling getFileThirdPartyTSO."
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (contractId !== undefined && contractId !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>contractId,
        "contract_id"
      );
    }
    if (startDate !== undefined && startDate !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>startDate,
        "startDate"
      );
    }
    if (endDate !== undefined && endDate !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>endDate,
        "endDate"
      );
    }
    if (fileType !== undefined && fileType !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>fileType,
        "fileType"
      );
    }
    if (balanceZoneId !== undefined && balanceZoneId !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>balanceZoneId,
        "balance_zone_id"
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (api_key) required
    localVarCredential = this.configuration.lookupCredential("api_key");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("X-Auth", localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ["application/json"];
      localVarHttpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        "Accept",
        localVarHttpHeaderAcceptSelected
      );
    }

    let localVarHttpContext: HttpContext | undefined =
      options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: "text" | "json" | "blob" = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (
        this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)
      ) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }

    let localVarPath = `/contracts/third_party/tso_file`;
    return this.httpClient.request<Array<{ [key: string]: any }>>(
      "get",
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        params: localVarQueryParameters,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Returns all gas swaps contracts
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getGasSwapContracts(
    observe?: "body",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<Array<PhysicalGasSwapContract>>;
  public getGasSwapContracts(
    observe?: "response",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<HttpResponse<Array<PhysicalGasSwapContract>>>;
  public getGasSwapContracts(
    observe?: "events",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<HttpEvent<Array<PhysicalGasSwapContract>>>;
  public getGasSwapContracts(
    observe: any = "body",
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<any> {
    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (api_key) required
    localVarCredential = this.configuration.lookupCredential("api_key");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("X-Auth", localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ["application/json"];
      localVarHttpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        "Accept",
        localVarHttpHeaderAcceptSelected
      );
    }

    let localVarHttpContext: HttpContext | undefined =
      options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: "text" | "json" | "blob" = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (
        this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)
      ) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }

    let localVarPath = `/contracts/third_party/gas_swaps`;
    return this.httpClient.request<Array<PhysicalGasSwapContract>>(
      "get",
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Get gas swaps contracts by counterparty
   * @param ownerId
   * @param counterpartyId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getGasSwapContractsByCounterparty(
    ownerId: number,
    counterpartyId: number,
    observe?: "body",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<Array<PhysicalGasSwapContract>>;
  public getGasSwapContractsByCounterparty(
    ownerId: number,
    counterpartyId: number,
    observe?: "response",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<HttpResponse<Array<PhysicalGasSwapContract>>>;
  public getGasSwapContractsByCounterparty(
    ownerId: number,
    counterpartyId: number,
    observe?: "events",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<HttpEvent<Array<PhysicalGasSwapContract>>>;
  public getGasSwapContractsByCounterparty(
    ownerId: number,
    counterpartyId: number,
    observe: any = "body",
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<any> {
    if (ownerId === null || ownerId === undefined) {
      throw new Error(
        "Required parameter ownerId was null or undefined when calling getGasSwapContractsByCounterparty."
      );
    }
    if (counterpartyId === null || counterpartyId === undefined) {
      throw new Error(
        "Required parameter counterpartyId was null or undefined when calling getGasSwapContractsByCounterparty."
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (ownerId !== undefined && ownerId !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>ownerId,
        "owner_id"
      );
    }
    if (counterpartyId !== undefined && counterpartyId !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>counterpartyId,
        "counterparty_id"
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (api_key) required
    localVarCredential = this.configuration.lookupCredential("api_key");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("X-Auth", localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ["application/json"];
      localVarHttpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        "Accept",
        localVarHttpHeaderAcceptSelected
      );
    }

    let localVarHttpContext: HttpContext | undefined =
      options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: "text" | "json" | "blob" = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (
        this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)
      ) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }

    let localVarPath = `/contracts/third_party/gas_swaps/getByCounterparty`;
    return this.httpClient.request<Array<PhysicalGasSwapContract>>(
      "get",
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        params: localVarQueryParameters,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Returns all gas swaps contracts
   * @param ownerId
   * @param balanceZoneId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getGasSwapContractsLabels(
    ownerId?: number,
    balanceZoneId?: number,
    observe?: "body",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<Array<PhysicalGasSwapContract>>;
  public getGasSwapContractsLabels(
    ownerId?: number,
    balanceZoneId?: number,
    observe?: "response",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<HttpResponse<Array<PhysicalGasSwapContract>>>;
  public getGasSwapContractsLabels(
    ownerId?: number,
    balanceZoneId?: number,
    observe?: "events",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<HttpEvent<Array<PhysicalGasSwapContract>>>;
  public getGasSwapContractsLabels(
    ownerId?: number,
    balanceZoneId?: number,
    observe: any = "body",
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<any> {
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (ownerId !== undefined && ownerId !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>ownerId,
        "owner_id"
      );
    }
    if (balanceZoneId !== undefined && balanceZoneId !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>balanceZoneId,
        "balance_zone_id"
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (api_key) required
    localVarCredential = this.configuration.lookupCredential("api_key");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("X-Auth", localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ["application/json"];
      localVarHttpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        "Accept",
        localVarHttpHeaderAcceptSelected
      );
    }

    let localVarHttpContext: HttpContext | undefined =
      options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: "text" | "json" | "blob" = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (
        this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)
      ) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }

    let localVarPath = `/contracts/third_party/gas_swaps/labels`;
    return this.httpClient.request<Array<PhysicalGasSwapContract>>(
      "get",
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        params: localVarQueryParameters,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Returns all gas swap operations for a certain contract
   * @param contractId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getGasSwapOperations(
    contractId: number,
    observe?: "body",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<Array<ThirdPartyOperation>>;
  public getGasSwapOperations(
    contractId: number,
    observe?: "response",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<HttpResponse<Array<ThirdPartyOperation>>>;
  public getGasSwapOperations(
    contractId: number,
    observe?: "events",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<HttpEvent<Array<ThirdPartyOperation>>>;
  public getGasSwapOperations(
    contractId: number,
    observe: any = "body",
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<any> {
    if (contractId === null || contractId === undefined) {
      throw new Error(
        "Required parameter contractId was null or undefined when calling getGasSwapOperations."
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (contractId !== undefined && contractId !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>contractId,
        "contract_id"
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (api_key) required
    localVarCredential = this.configuration.lookupCredential("api_key");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("X-Auth", localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ["application/json"];
      localVarHttpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        "Accept",
        localVarHttpHeaderAcceptSelected
      );
    }

    let localVarHttpContext: HttpContext | undefined =
      options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: "text" | "json" | "blob" = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (
        this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)
      ) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }

    let localVarPath = `/contracts/third_party/gas_swaps/contractOperations`;
    return this.httpClient.request<Array<ThirdPartyOperation>>(
      "get",
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        params: localVarQueryParameters,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Returns the date range of swaps operations
   * @param contractCode
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getGasSwapOperationsDateRange(
    contractCode: string,
    observe?: "body",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<Array<string>>;
  public getGasSwapOperationsDateRange(
    contractCode: string,
    observe?: "response",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<HttpResponse<Array<string>>>;
  public getGasSwapOperationsDateRange(
    contractCode: string,
    observe?: "events",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<HttpEvent<Array<string>>>;
  public getGasSwapOperationsDateRange(
    contractCode: string,
    observe: any = "body",
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<any> {
    if (contractCode === null || contractCode === undefined) {
      throw new Error(
        "Required parameter contractCode was null or undefined when calling getGasSwapOperationsDateRange."
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (contractCode !== undefined && contractCode !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>contractCode,
        "contract_code"
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (api_key) required
    localVarCredential = this.configuration.lookupCredential("api_key");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("X-Auth", localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ["application/json"];
      localVarHttpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        "Accept",
        localVarHttpHeaderAcceptSelected
      );
    }

    let localVarHttpContext: HttpContext | undefined =
      options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: "text" | "json" | "blob" = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (
        this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)
      ) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }

    let localVarPath = `/contracts/third_party/gas_swaps/contractOperationRange`;
    return this.httpClient.request<Array<string>>(
      "get",
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        params: localVarQueryParameters,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Returns all purchase/sale contracts
   * @param balanceZoneId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getPurchasesSalesContracts(
    balanceZoneId?: number,
    observe?: "body",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<Array<ThirdPartyContract>>;
  public getPurchasesSalesContracts(
    balanceZoneId?: number,
    observe?: "response",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<HttpResponse<Array<ThirdPartyContract>>>;
  public getPurchasesSalesContracts(
    balanceZoneId?: number,
    observe?: "events",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<HttpEvent<Array<ThirdPartyContract>>>;
  public getPurchasesSalesContracts(
    balanceZoneId?: number,
    observe: any = "body",
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<any> {
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (balanceZoneId !== undefined && balanceZoneId !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>balanceZoneId,
        "balance_zone_id"
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (api_key) required
    localVarCredential = this.configuration.lookupCredential("api_key");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("X-Auth", localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ["application/json"];
      localVarHttpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        "Accept",
        localVarHttpHeaderAcceptSelected
      );
    }

    let localVarHttpContext: HttpContext | undefined =
      options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: "text" | "json" | "blob" = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (
        this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)
      ) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }

    let localVarPath = `/contracts/third_party/purchases_sales`;
    return this.httpClient.request<Array<ThirdPartyContract>>(
      "get",
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        params: localVarQueryParameters,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Returns all purchase/sale contracts
   * @param ownerId
   * @param balanceZoneId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getPurchasesSalesContractsLabels(
    ownerId?: number,
    balanceZoneId?: number,
    observe?: "body",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<Array<ThirdPartyContract>>;
  public getPurchasesSalesContractsLabels(
    ownerId?: number,
    balanceZoneId?: number,
    observe?: "response",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<HttpResponse<Array<ThirdPartyContract>>>;
  public getPurchasesSalesContractsLabels(
    ownerId?: number,
    balanceZoneId?: number,
    observe?: "events",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<HttpEvent<Array<ThirdPartyContract>>>;
  public getPurchasesSalesContractsLabels(
    ownerId?: number,
    balanceZoneId?: number,
    observe: any = "body",
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<any> {
    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (ownerId !== undefined && ownerId !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>ownerId,
        "owner_id"
      );
    }
    if (balanceZoneId !== undefined && balanceZoneId !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>balanceZoneId,
        "balance_zone_id"
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (api_key) required
    localVarCredential = this.configuration.lookupCredential("api_key");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("X-Auth", localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ["application/json"];
      localVarHttpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        "Accept",
        localVarHttpHeaderAcceptSelected
      );
    }

    let localVarHttpContext: HttpContext | undefined =
      options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: "text" | "json" | "blob" = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (
        this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)
      ) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }

    let localVarPath = `/contracts/third_party/purchases_sales/labels`;
    return this.httpClient.request<Array<ThirdPartyContract>>(
      "get",
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        params: localVarQueryParameters,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Returns all purchase/sale product types
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getPurchasesSalesContractsProducts(
    observe?: "body",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<Array<string>>;
  public getPurchasesSalesContractsProducts(
    observe?: "response",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<HttpResponse<Array<string>>>;
  public getPurchasesSalesContractsProducts(
    observe?: "events",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<HttpEvent<Array<string>>>;
  public getPurchasesSalesContractsProducts(
    observe: any = "body",
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<any> {
    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (api_key) required
    localVarCredential = this.configuration.lookupCredential("api_key");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("X-Auth", localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ["application/json"];
      localVarHttpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        "Accept",
        localVarHttpHeaderAcceptSelected
      );
    }

    let localVarHttpContext: HttpContext | undefined =
      options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: "text" | "json" | "blob" = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (
        this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)
      ) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }

    let localVarPath = `/contracts/third_party/products`;
    return this.httpClient.request<Array<string>>(
      "get",
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Returns all purchases/sales for a certain contract
   * @param contractId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getPurchasesSalesOperations(
    contractId: number,
    observe?: "body",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<Array<ThirdPartyOperation>>;
  public getPurchasesSalesOperations(
    contractId: number,
    observe?: "response",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<HttpResponse<Array<ThirdPartyOperation>>>;
  public getPurchasesSalesOperations(
    contractId: number,
    observe?: "events",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<HttpEvent<Array<ThirdPartyOperation>>>;
  public getPurchasesSalesOperations(
    contractId: number,
    observe: any = "body",
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<any> {
    if (contractId === null || contractId === undefined) {
      throw new Error(
        "Required parameter contractId was null or undefined when calling getPurchasesSalesOperations."
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (contractId !== undefined && contractId !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>contractId,
        "contract_id"
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (api_key) required
    localVarCredential = this.configuration.lookupCredential("api_key");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("X-Auth", localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ["application/json"];
      localVarHttpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        "Accept",
        localVarHttpHeaderAcceptSelected
      );
    }

    let localVarHttpContext: HttpContext | undefined =
      options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: "text" | "json" | "blob" = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (
        this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)
      ) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }

    let localVarPath = `/contracts/third_party/purchases_sales/operations`;
    return this.httpClient.request<Array<ThirdPartyOperation>>(
      "get",
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        params: localVarQueryParameters,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Returns all fields for a certain contract
   * @param contractId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getThirdPartyContractVirtual(
    contractId: number,
    observe?: "body",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<Array<ThirdPartyContract>>;
  public getThirdPartyContractVirtual(
    contractId: number,
    observe?: "response",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<HttpResponse<Array<ThirdPartyContract>>>;
  public getThirdPartyContractVirtual(
    contractId: number,
    observe?: "events",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<HttpEvent<Array<ThirdPartyContract>>>;
  public getThirdPartyContractVirtual(
    contractId: number,
    observe: any = "body",
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<any> {
    if (contractId === null || contractId === undefined) {
      throw new Error(
        "Required parameter contractId was null or undefined when calling getThirdPartyContractVirtual."
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (contractId !== undefined && contractId !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>contractId,
        "contractId"
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (api_key) required
    localVarCredential = this.configuration.lookupCredential("api_key");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("X-Auth", localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ["application/json"];
      localVarHttpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        "Accept",
        localVarHttpHeaderAcceptSelected
      );
    }

    let localVarHttpContext: HttpContext | undefined =
      options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: "text" | "json" | "blob" = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (
        this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)
      ) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }

    let localVarPath = `/contracts/virtual/third_party`;
    return this.httpClient.request<Array<ThirdPartyContract>>(
      "get",
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        params: localVarQueryParameters,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Returns all third-party contracts virtual
   * @param contractType
   * @param ownerId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getThirdPartyContractsVirtualLabels(
    contractType: string,
    ownerId?: number,
    observe?: "body",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<Array<ThirdPartyContract>>;
  public getThirdPartyContractsVirtualLabels(
    contractType: string,
    ownerId?: number,
    observe?: "response",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<HttpResponse<Array<ThirdPartyContract>>>;
  public getThirdPartyContractsVirtualLabels(
    contractType: string,
    ownerId?: number,
    observe?: "events",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<HttpEvent<Array<ThirdPartyContract>>>;
  public getThirdPartyContractsVirtualLabels(
    contractType: string,
    ownerId?: number,
    observe: any = "body",
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<any> {
    if (contractType === null || contractType === undefined) {
      throw new Error(
        "Required parameter contractType was null or undefined when calling getThirdPartyContractsVirtualLabels."
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (ownerId !== undefined && ownerId !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>ownerId,
        "owner_id"
      );
    }
    if (contractType !== undefined && contractType !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>contractType,
        "contract_type"
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (api_key) required
    localVarCredential = this.configuration.lookupCredential("api_key");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("X-Auth", localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ["application/json"];
      localVarHttpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        "Accept",
        localVarHttpHeaderAcceptSelected
      );
    }

    let localVarHttpContext: HttpContext | undefined =
      options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: "text" | "json" | "blob" = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (
        this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)
      ) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }

    let localVarPath = `/contracts/virtual/third_party/labels`;
    return this.httpClient.request<Array<ThirdPartyContract>>(
      "get",
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        params: localVarQueryParameters,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Returns all purchases/sales for a certain contract
   * @param contractId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getThirdPartyOperationsVirtual(
    contractId: number,
    observe?: "body",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<Array<ThirdPartyOperation>>;
  public getThirdPartyOperationsVirtual(
    contractId: number,
    observe?: "response",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<HttpResponse<Array<ThirdPartyOperation>>>;
  public getThirdPartyOperationsVirtual(
    contractId: number,
    observe?: "events",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<HttpEvent<Array<ThirdPartyOperation>>>;
  public getThirdPartyOperationsVirtual(
    contractId: number,
    observe: any = "body",
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<any> {
    if (contractId === null || contractId === undefined) {
      throw new Error(
        "Required parameter contractId was null or undefined when calling getThirdPartyOperationsVirtual."
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (contractId !== undefined && contractId !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>contractId,
        "contract_id"
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (api_key) required
    localVarCredential = this.configuration.lookupCredential("api_key");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("X-Auth", localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ["application/json"];
      localVarHttpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        "Accept",
        localVarHttpHeaderAcceptSelected
      );
    }

    let localVarHttpContext: HttpContext | undefined =
      options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: "text" | "json" | "blob" = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (
        this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)
      ) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }

    let localVarPath = `/contracts/virtual/third_party/operations`;
    return this.httpClient.request<Array<ThirdPartyOperation>>(
      "get",
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        params: localVarQueryParameters,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Deletes a third-party contract
   * @param contractId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public removeThirdPartyContractVirtual(
    contractId: number,
    observe?: "body",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: undefined; context?: HttpContext }
  ): Observable<any>;
  public removeThirdPartyContractVirtual(
    contractId: number,
    observe?: "response",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: undefined; context?: HttpContext }
  ): Observable<HttpResponse<any>>;
  public removeThirdPartyContractVirtual(
    contractId: number,
    observe?: "events",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: undefined; context?: HttpContext }
  ): Observable<HttpEvent<any>>;
  public removeThirdPartyContractVirtual(
    contractId: number,
    observe: any = "body",
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: undefined; context?: HttpContext }
  ): Observable<any> {
    if (contractId === null || contractId === undefined) {
      throw new Error(
        "Required parameter contractId was null or undefined when calling removeThirdPartyContractVirtual."
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (contractId !== undefined && contractId !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>contractId,
        "contract_id"
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (api_key) required
    localVarCredential = this.configuration.lookupCredential("api_key");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("X-Auth", localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = [];
      localVarHttpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        "Accept",
        localVarHttpHeaderAcceptSelected
      );
    }

    let localVarHttpContext: HttpContext | undefined =
      options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: "text" | "json" | "blob" = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (
        this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)
      ) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }

    let localVarPath = `/contracts/virtual/third_party`;
    return this.httpClient.request<any>(
      "delete",
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        params: localVarQueryParameters,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Set a list of gas swap operations for a certain contract
   *
   * @param contractId
   * @param thirdPartyOperation Array of ThirdPartyOperation objects to add
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public setGasSwapOperations(
    contractId: number,
    thirdPartyOperation: Array<ThirdPartyOperation>,
    observe?: "body",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: undefined; context?: HttpContext }
  ): Observable<any>;
  public setGasSwapOperations(
    contractId: number,
    thirdPartyOperation: Array<ThirdPartyOperation>,
    observe?: "response",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: undefined; context?: HttpContext }
  ): Observable<HttpResponse<any>>;
  public setGasSwapOperations(
    contractId: number,
    thirdPartyOperation: Array<ThirdPartyOperation>,
    observe?: "events",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: undefined; context?: HttpContext }
  ): Observable<HttpEvent<any>>;
  public setGasSwapOperations(
    contractId: number,
    thirdPartyOperation: Array<ThirdPartyOperation>,
    observe: any = "body",
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: undefined; context?: HttpContext }
  ): Observable<any> {
    if (contractId === null || contractId === undefined) {
      throw new Error(
        "Required parameter contractId was null or undefined when calling setGasSwapOperations."
      );
    }
    if (thirdPartyOperation === null || thirdPartyOperation === undefined) {
      throw new Error(
        "Required parameter thirdPartyOperation was null or undefined when calling setGasSwapOperations."
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (contractId !== undefined && contractId !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>contractId,
        "contract_id"
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (api_key) required
    localVarCredential = this.configuration.lookupCredential("api_key");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("X-Auth", localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = [];
      localVarHttpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        "Accept",
        localVarHttpHeaderAcceptSelected
      );
    }

    let localVarHttpContext: HttpContext | undefined =
      options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    // to determine the Content-Type header
    const consumes: string[] = ["application/json"];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        "Content-Type",
        httpContentTypeSelected
      );
    }

    let responseType_: "text" | "json" | "blob" = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (
        this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)
      ) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }

    let localVarPath = `/contracts/third_party/gas_swaps/contractOperations`;
    return this.httpClient.request<any>(
      "post",
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        body: thirdPartyOperation,
        params: localVarQueryParameters,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Set a list of purchase/sale operations
   * @param contractId
   * @param thirdPartyOperation Array of ThirdPartyOperation objects to add
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public setPurchasesSalesOperations(
    contractId: number,
    thirdPartyOperation: Array<ThirdPartyOperation>,
    observe?: "body",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: undefined; context?: HttpContext }
  ): Observable<any>;
  public setPurchasesSalesOperations(
    contractId: number,
    thirdPartyOperation: Array<ThirdPartyOperation>,
    observe?: "response",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: undefined; context?: HttpContext }
  ): Observable<HttpResponse<any>>;
  public setPurchasesSalesOperations(
    contractId: number,
    thirdPartyOperation: Array<ThirdPartyOperation>,
    observe?: "events",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: undefined; context?: HttpContext }
  ): Observable<HttpEvent<any>>;
  public setPurchasesSalesOperations(
    contractId: number,
    thirdPartyOperation: Array<ThirdPartyOperation>,
    observe: any = "body",
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: undefined; context?: HttpContext }
  ): Observable<any> {
    if (contractId === null || contractId === undefined) {
      throw new Error(
        "Required parameter contractId was null or undefined when calling setPurchasesSalesOperations."
      );
    }
    if (thirdPartyOperation === null || thirdPartyOperation === undefined) {
      throw new Error(
        "Required parameter thirdPartyOperation was null or undefined when calling setPurchasesSalesOperations."
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (contractId !== undefined && contractId !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>contractId,
        "contract_id"
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (api_key) required
    localVarCredential = this.configuration.lookupCredential("api_key");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("X-Auth", localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = [];
      localVarHttpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        "Accept",
        localVarHttpHeaderAcceptSelected
      );
    }

    let localVarHttpContext: HttpContext | undefined =
      options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    // to determine the Content-Type header
    const consumes: string[] = ["application/json"];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        "Content-Type",
        httpContentTypeSelected
      );
    }

    let responseType_: "text" | "json" | "blob" = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (
        this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)
      ) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }

    let localVarPath = `/contracts/third_party/purchases_sales/operations`;
    return this.httpClient.request<any>(
      "post",
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        body: thirdPartyOperation,
        params: localVarQueryParameters,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Set a list of purchase/sale operations
   * @param contractId
   * @param thirdPartyOperation Array of ThirdPartyOperation objects to add
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public setThirdPartyOperationsVirtual(
    contractId: number,
    thirdPartyOperation: Array<ThirdPartyOperation>,
    observe?: "body",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: undefined; context?: HttpContext }
  ): Observable<any>;
  public setThirdPartyOperationsVirtual(
    contractId: number,
    thirdPartyOperation: Array<ThirdPartyOperation>,
    observe?: "response",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: undefined; context?: HttpContext }
  ): Observable<HttpResponse<any>>;
  public setThirdPartyOperationsVirtual(
    contractId: number,
    thirdPartyOperation: Array<ThirdPartyOperation>,
    observe?: "events",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: undefined; context?: HttpContext }
  ): Observable<HttpEvent<any>>;
  public setThirdPartyOperationsVirtual(
    contractId: number,
    thirdPartyOperation: Array<ThirdPartyOperation>,
    observe: any = "body",
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: undefined; context?: HttpContext }
  ): Observable<any> {
    if (contractId === null || contractId === undefined) {
      throw new Error(
        "Required parameter contractId was null or undefined when calling setThirdPartyOperationsVirtual."
      );
    }
    if (thirdPartyOperation === null || thirdPartyOperation === undefined) {
      throw new Error(
        "Required parameter thirdPartyOperation was null or undefined when calling setThirdPartyOperationsVirtual."
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (contractId !== undefined && contractId !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>contractId,
        "contract_id"
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (api_key) required
    localVarCredential = this.configuration.lookupCredential("api_key");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("X-Auth", localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = [];
      localVarHttpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        "Accept",
        localVarHttpHeaderAcceptSelected
      );
    }

    let localVarHttpContext: HttpContext | undefined =
      options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    // to determine the Content-Type header
    const consumes: string[] = ["application/json"];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        "Content-Type",
        httpContentTypeSelected
      );
    }

    let responseType_: "text" | "json" | "blob" = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (
        this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)
      ) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }

    let localVarPath = `/contracts/virtual/third_party/operations`;
    return this.httpClient.request<any>(
      "post",
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        body: thirdPartyOperation,
        params: localVarQueryParameters,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Submit third-party operations (gas swaps) to TSO through Web Service
   * @param contractCode
   * @param startDate
   * @param endDate
   * @param balanceZoneId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public submitPhysicalGasSwapsToTSO(
    contractCode: string,
    startDate: string,
    endDate: string,
    balanceZoneId: number,
    observe?: "body",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: undefined; context?: HttpContext }
  ): Observable<any>;
  public submitPhysicalGasSwapsToTSO(
    contractCode: string,
    startDate: string,
    endDate: string,
    balanceZoneId: number,
    observe?: "response",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: undefined; context?: HttpContext }
  ): Observable<HttpResponse<any>>;
  public submitPhysicalGasSwapsToTSO(
    contractCode: string,
    startDate: string,
    endDate: string,
    balanceZoneId: number,
    observe?: "events",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: undefined; context?: HttpContext }
  ): Observable<HttpEvent<any>>;
  public submitPhysicalGasSwapsToTSO(
    contractCode: string,
    startDate: string,
    endDate: string,
    balanceZoneId: number,
    observe: any = "body",
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: undefined; context?: HttpContext }
  ): Observable<any> {
    if (contractCode === null || contractCode === undefined) {
      throw new Error(
        "Required parameter contractCode was null or undefined when calling submitPhysicalGasSwapsToTSO."
      );
    }
    if (startDate === null || startDate === undefined) {
      throw new Error(
        "Required parameter startDate was null or undefined when calling submitPhysicalGasSwapsToTSO."
      );
    }
    if (endDate === null || endDate === undefined) {
      throw new Error(
        "Required parameter endDate was null or undefined when calling submitPhysicalGasSwapsToTSO."
      );
    }
    if (balanceZoneId === null || balanceZoneId === undefined) {
      throw new Error(
        "Required parameter balanceZoneId was null or undefined when calling submitPhysicalGasSwapsToTSO."
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (contractCode !== undefined && contractCode !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>contractCode,
        "contract_code"
      );
    }
    if (startDate !== undefined && startDate !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>startDate,
        "startDate"
      );
    }
    if (endDate !== undefined && endDate !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>endDate,
        "endDate"
      );
    }
    if (balanceZoneId !== undefined && balanceZoneId !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>balanceZoneId,
        "balance_zone_id"
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (api_key) required
    localVarCredential = this.configuration.lookupCredential("api_key");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("X-Auth", localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = [];
      localVarHttpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        "Accept",
        localVarHttpHeaderAcceptSelected
      );
    }

    let localVarHttpContext: HttpContext | undefined =
      options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: "text" | "json" | "blob" = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (
        this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)
      ) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }

    let localVarPath = `/contracts/third_party/gas_swaps/submit_tso`;
    return this.httpClient.request<any>(
      "get",
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        params: localVarQueryParameters,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Submit third-party operations to TSO through Web Service
   * @param contractId
   * @param startDate
   * @param endDate
   * @param balanceZoneId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public submitThirdPartyToTSO(
    contractId: number,
    startDate: string,
    endDate: string,
    balanceZoneId: number,
    observe?: "body",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: undefined; context?: HttpContext }
  ): Observable<any>;
  public submitThirdPartyToTSO(
    contractId: number,
    startDate: string,
    endDate: string,
    balanceZoneId: number,
    observe?: "response",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: undefined; context?: HttpContext }
  ): Observable<HttpResponse<any>>;
  public submitThirdPartyToTSO(
    contractId: number,
    startDate: string,
    endDate: string,
    balanceZoneId: number,
    observe?: "events",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: undefined; context?: HttpContext }
  ): Observable<HttpEvent<any>>;
  public submitThirdPartyToTSO(
    contractId: number,
    startDate: string,
    endDate: string,
    balanceZoneId: number,
    observe: any = "body",
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: undefined; context?: HttpContext }
  ): Observable<any> {
    if (contractId === null || contractId === undefined) {
      throw new Error(
        "Required parameter contractId was null or undefined when calling submitThirdPartyToTSO."
      );
    }
    if (startDate === null || startDate === undefined) {
      throw new Error(
        "Required parameter startDate was null or undefined when calling submitThirdPartyToTSO."
      );
    }
    if (endDate === null || endDate === undefined) {
      throw new Error(
        "Required parameter endDate was null or undefined when calling submitThirdPartyToTSO."
      );
    }
    if (balanceZoneId === null || balanceZoneId === undefined) {
      throw new Error(
        "Required parameter balanceZoneId was null or undefined when calling submitThirdPartyToTSO."
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (contractId !== undefined && contractId !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>contractId,
        "contract_id"
      );
    }
    if (startDate !== undefined && startDate !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>startDate,
        "startDate"
      );
    }
    if (endDate !== undefined && endDate !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>endDate,
        "endDate"
      );
    }
    if (balanceZoneId !== undefined && balanceZoneId !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>balanceZoneId,
        "balance_zone_id"
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (api_key) required
    localVarCredential = this.configuration.lookupCredential("api_key");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("X-Auth", localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = [];
      localVarHttpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        "Accept",
        localVarHttpHeaderAcceptSelected
      );
    }

    let localVarHttpContext: HttpContext | undefined =
      options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: "text" | "json" | "blob" = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (
        this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)
      ) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }

    let localVarPath = `/contracts/third_party/submit_tso`;
    return this.httpClient.request<any>(
      "get",
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        params: localVarQueryParameters,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Update an existing gas swap contract
   *
   * @param physicalGasSwapContract Physical Gas Swap Contract object to add
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public updateGasSwapContract(
    physicalGasSwapContract: PhysicalGasSwapContract,
    observe?: "body",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<PhysicalGasSwapContract>;
  public updateGasSwapContract(
    physicalGasSwapContract: PhysicalGasSwapContract,
    observe?: "response",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<HttpResponse<PhysicalGasSwapContract>>;
  public updateGasSwapContract(
    physicalGasSwapContract: PhysicalGasSwapContract,
    observe?: "events",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<HttpEvent<PhysicalGasSwapContract>>;
  public updateGasSwapContract(
    physicalGasSwapContract: PhysicalGasSwapContract,
    observe: any = "body",
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<any> {
    if (
      physicalGasSwapContract === null ||
      physicalGasSwapContract === undefined
    ) {
      throw new Error(
        "Required parameter physicalGasSwapContract was null or undefined when calling updateGasSwapContract."
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (api_key) required
    localVarCredential = this.configuration.lookupCredential("api_key");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("X-Auth", localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ["application/json"];
      localVarHttpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        "Accept",
        localVarHttpHeaderAcceptSelected
      );
    }

    let localVarHttpContext: HttpContext | undefined =
      options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    // to determine the Content-Type header
    const consumes: string[] = ["application/json"];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        "Content-Type",
        httpContentTypeSelected
      );
    }

    let responseType_: "text" | "json" | "blob" = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (
        this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)
      ) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }

    let localVarPath = `/contracts/third_party/gas_swaps`;
    return this.httpClient.request<PhysicalGasSwapContract>(
      "put",
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        body: physicalGasSwapContract,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Update an existing purchase/sale contract
   *
   * @param thirdPartyContract ThirdPartyContract object to add
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public updatePurchaseSaleContract(
    thirdPartyContract: ThirdPartyContract,
    observe?: "body",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<ThirdPartyContract>;
  public updatePurchaseSaleContract(
    thirdPartyContract: ThirdPartyContract,
    observe?: "response",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<HttpResponse<ThirdPartyContract>>;
  public updatePurchaseSaleContract(
    thirdPartyContract: ThirdPartyContract,
    observe?: "events",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<HttpEvent<ThirdPartyContract>>;
  public updatePurchaseSaleContract(
    thirdPartyContract: ThirdPartyContract,
    observe: any = "body",
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<any> {
    if (thirdPartyContract === null || thirdPartyContract === undefined) {
      throw new Error(
        "Required parameter thirdPartyContract was null or undefined when calling updatePurchaseSaleContract."
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (api_key) required
    localVarCredential = this.configuration.lookupCredential("api_key");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("X-Auth", localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ["application/json"];
      localVarHttpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        "Accept",
        localVarHttpHeaderAcceptSelected
      );
    }

    let localVarHttpContext: HttpContext | undefined =
      options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    // to determine the Content-Type header
    const consumes: string[] = ["application/json"];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        "Content-Type",
        httpContentTypeSelected
      );
    }

    let responseType_: "text" | "json" | "blob" = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (
        this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)
      ) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }

    let localVarPath = `/contracts/third_party/purchases_sales`;
    return this.httpClient.request<ThirdPartyContract>(
      "put",
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        body: thirdPartyContract,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Update a third party virtual
   * @param contractType
   * @param thirdPartyContract ThirdPartyContract object to add
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public updateThirdPartyContractVirtual(
    contractType: string,
    thirdPartyContract: ThirdPartyContract,
    observe?: "body",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<ThirdPartyContract>;
  public updateThirdPartyContractVirtual(
    contractType: string,
    thirdPartyContract: ThirdPartyContract,
    observe?: "response",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<HttpResponse<ThirdPartyContract>>;
  public updateThirdPartyContractVirtual(
    contractType: string,
    thirdPartyContract: ThirdPartyContract,
    observe?: "events",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<HttpEvent<ThirdPartyContract>>;
  public updateThirdPartyContractVirtual(
    contractType: string,
    thirdPartyContract: ThirdPartyContract,
    observe: any = "body",
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<any> {
    if (contractType === null || contractType === undefined) {
      throw new Error(
        "Required parameter contractType was null or undefined when calling updateThirdPartyContractVirtual."
      );
    }
    if (thirdPartyContract === null || thirdPartyContract === undefined) {
      throw new Error(
        "Required parameter thirdPartyContract was null or undefined when calling updateThirdPartyContractVirtual."
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (contractType !== undefined && contractType !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>contractType,
        "contract_type"
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (api_key) required
    localVarCredential = this.configuration.lookupCredential("api_key");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("X-Auth", localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ["application/json"];
      localVarHttpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        "Accept",
        localVarHttpHeaderAcceptSelected
      );
    }

    let localVarHttpContext: HttpContext | undefined =
      options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    // to determine the Content-Type header
    const consumes: string[] = ["application/json"];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        "Content-Type",
        httpContentTypeSelected
      );
    }

    let responseType_: "text" | "json" | "blob" = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (
        this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)
      ) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }

    let localVarPath = `/contracts/virtual/third_party`;
    return this.httpClient.request<ThirdPartyContract>(
      "put",
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        body: thirdPartyContract,
        params: localVarQueryParameters,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }
  /**
   * Returns a report for gas physical gas swaps
   * @param startDate
   * @param endDate
   * @param ownerId
   * @param balanceZoneId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getPhysicalGasOperationsTSO(
    startDate: string,
    endDate: string,
    ownerId: number,
    balanceZoneId: number,
    observe?: "body",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<any>;
  public getPhysicalGasOperationsTSO(
    startDate: string,
    endDate: string,
    ownerId: number,
    balanceZoneId: number,
    observe?: "response",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<HttpResponse<any>>;
  public getPhysicalGasOperationsTSO(
    startDate: string,
    endDate: string,
    ownerId: number,
    balanceZoneId: number,
    observe?: "events",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<HttpEvent<any>>;
  public getPhysicalGasOperationsTSO(
    startDate: string,
    endDate: string,
    ownerId: number,
    balanceZoneId: number,
    observe: any = "body",
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<any> {
    if (startDate === null || startDate === undefined) {
      throw new Error(
        "Required parameter startDate was null or undefined when calling getPhysicalGasOperationsTSO."
      );
    }
    if (endDate === null || endDate === undefined) {
      throw new Error(
        "Required parameter endDate was null or undefined when calling getPhysicalGasOperationsTSO."
      );
    }
    if (ownerId === null || ownerId === undefined) {
      throw new Error(
        "Required parameter ownerId was null or undefined when calling getPhysicalGasOperationsTSO."
      );
    }
    if (balanceZoneId === null || balanceZoneId === undefined) {
      throw new Error(
        "Required parameter balanceZoneId was null or undefined when calling getPhysicalGasOperationsTSO."
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (startDate !== undefined && startDate !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>startDate,
        "startDate"
      );
    }
    if (endDate !== undefined && endDate !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>endDate,
        "endDate"
      );
    }
    if (ownerId !== undefined && ownerId !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>ownerId,
        "owner_id"
      );
    }
    if (balanceZoneId !== undefined && balanceZoneId !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>balanceZoneId,
        "balance_zone_id"
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (api_key) required
    localVarCredential = this.configuration.lookupCredential("api_key");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("X-Auth", localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ["application/json"];
      localVarHttpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        "Accept",
        localVarHttpHeaderAcceptSelected
      );
    }

    let localVarHttpContext: HttpContext | undefined =
      options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: "text" | "json" | "blob" = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (
        this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)
      ) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }

    let localVarPath = `/contracts/third_party/tso`;
    return this.httpClient.request<any>(
      "get",
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        params: localVarQueryParameters,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }
  /**
   * Deletes a swap contract
   * @param contractId
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public removeGasSwapContract(
    contractId: number,
    observe?: "body",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: undefined; context?: HttpContext }
  ): Observable<any>;
  public removeGasSwapContract(
    contractId: number,
    observe?: "response",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: undefined; context?: HttpContext }
  ): Observable<HttpResponse<any>>;
  public removeGasSwapContract(
    contractId: number,
    observe?: "events",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: undefined; context?: HttpContext }
  ): Observable<HttpEvent<any>>;
  public removeGasSwapContract(
    contractId: number,
    observe: any = "body",
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: undefined; context?: HttpContext }
  ): Observable<any> {
    if (contractId === null || contractId === undefined) {
      throw new Error(
        "Required parameter contractId was null or undefined when calling removeGasSwapContract."
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (contractId !== undefined && contractId !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>contractId,
        "contract_id"
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (api_key) required
    localVarCredential = this.configuration.lookupCredential("api_key");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("X-Auth", localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = [];
      localVarHttpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        "Accept",
        localVarHttpHeaderAcceptSelected
      );
    }

    let localVarHttpContext: HttpContext | undefined =
      options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: "text" | "json" | "blob" = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (
        this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)
      ) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }

    let localVarPath = `/contracts/third_party/gas_swaps`;
    return this.httpClient.request<any>(
      "delete",
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        params: localVarQueryParameters,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }
  /**
   * Get balance zone\&#39;s balance
   * @param balanceZoneId
   * @param startDate
   * @param endDate
   * @param entity
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getExchangeNotificationsTSO(
    balanceZoneId: number,
    startDate: string,
    endDate: string,
    entity: number,
    observe?: "body",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<Array<{ [key: string]: any }>>;
  public getExchangeNotificationsTSO(
    balanceZoneId: number,
    startDate: string,
    endDate: string,
    entity: number,
    observe?: "response",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<HttpResponse<Array<{ [key: string]: any }>>>;
  public getExchangeNotificationsTSO(
    balanceZoneId: number,
    startDate: string,
    endDate: string,
    entity: number,
    observe?: "events",
    reportProgress?: boolean,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<HttpEvent<Array<{ [key: string]: any }>>>;
  public getExchangeNotificationsTSO(
    balanceZoneId: number,
    startDate: string,
    endDate: string,
    entity: number,
    observe: any = "body",
    reportProgress: boolean = false,
    options?: { httpHeaderAccept?: "application/json"; context?: HttpContext }
  ): Observable<any> {
    if (balanceZoneId === null || balanceZoneId === undefined) {
      throw new Error(
        "Required parameter balanceZoneId was null or undefined when calling getExchangeNotificationsTSO."
      );
    }
    if (startDate === null || startDate === undefined) {
      throw new Error(
        "Required parameter startDate was null or undefined when calling getExchangeNotificationsTSO."
      );
    }
    if (endDate === null || endDate === undefined) {
      throw new Error(
        "Required parameter endDate was null or undefined when calling getExchangeNotificationsTSO."
      );
    }
    if (entity === null || entity === undefined) {
      throw new Error(
        "Required parameter entity was null or undefined when calling getExchangeNotificationsTSO."
      );
    }

    let localVarQueryParameters = new HttpParams({ encoder: this.encoder });
    if (balanceZoneId !== undefined && balanceZoneId !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>balanceZoneId,
        "balance_zone_id"
      );
    }
    if (startDate !== undefined && startDate !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>startDate,
        "startDate"
      );
    }
    if (endDate !== undefined && endDate !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>endDate,
        "endDate"
      );
    }
    if (entity !== undefined && entity !== null) {
      localVarQueryParameters = this.addToHttpParams(
        localVarQueryParameters,
        <any>entity,
        "entity"
      );
    }

    let localVarHeaders = this.defaultHeaders;

    let localVarCredential: string | undefined;
    // authentication (api_key) required
    localVarCredential = this.configuration.lookupCredential("api_key");
    if (localVarCredential) {
      localVarHeaders = localVarHeaders.set("X-Auth", localVarCredential);
    }

    let localVarHttpHeaderAcceptSelected: string | undefined =
      options && options.httpHeaderAccept;
    if (localVarHttpHeaderAcceptSelected === undefined) {
      // to determine the Accept header
      const httpHeaderAccepts: string[] = ["application/json"];
      localVarHttpHeaderAcceptSelected =
        this.configuration.selectHeaderAccept(httpHeaderAccepts);
    }
    if (localVarHttpHeaderAcceptSelected !== undefined) {
      localVarHeaders = localVarHeaders.set(
        "Accept",
        localVarHttpHeaderAcceptSelected
      );
    }

    let localVarHttpContext: HttpContext | undefined =
      options && options.context;
    if (localVarHttpContext === undefined) {
      localVarHttpContext = new HttpContext();
    }

    let responseType_: "text" | "json" | "blob" = "json";
    if (localVarHttpHeaderAcceptSelected) {
      if (localVarHttpHeaderAcceptSelected.startsWith("text")) {
        responseType_ = "text";
      } else if (
        this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)
      ) {
        responseType_ = "json";
      } else {
        responseType_ = "blob";
      }
    }

    let localVarPath = `/contracts/third_party/exchange/tso`;
    return this.httpClient.request<Array<{ [key: string]: any }>>(
      "get",
      `${this.configuration.basePath}${localVarPath}`,
      {
        context: localVarHttpContext,
        params: localVarQueryParameters,
        responseType: <any>responseType_,
        withCredentials: this.configuration.withCredentials,
        headers: localVarHeaders,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }
}
