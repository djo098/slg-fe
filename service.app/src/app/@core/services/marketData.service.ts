/**
 * SLG API
 * REST API for the New SLG (Novo Sistema de Logística de Gás)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */


import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { ContractWorksheetTemplateCol } from '../schemas/contractWorksheetTemplateCol';
// @ts-ignore
import { Market } from '../schemas/market';
// @ts-ignore
import { ReportResponse } from '../schemas/reportResponse';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../../variables';
import { Configuration }                                     from '../../configuration';
import { ProfileService } from './sharedServices/auth.service';



@Injectable({
  providedIn: 'root'
})
export class MarketDataService {

    protected basePath = BASE_PATH;
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string|string[], @Optional() configuration: Configuration, private profileService : ProfileService) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (Array.isArray(basePath) && basePath.length > 0) {
                basePath = basePath[0];
            }

            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();

        
    }


     // @ts-ignore
     private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, (value as Date).toISOString().substr(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

     /**
     * Get Imbalance Prices
     * 
     * @param balanceZoneId 
     * @param startDate 
     * @param endDate 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
     public getImbalancePrices(balanceZoneId: number, startDate: string, endDate: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<ReportResponse>;
     public getImbalancePrices(balanceZoneId: number, startDate: string, endDate: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<ReportResponse>>;
     public getImbalancePrices(balanceZoneId: number, startDate: string, endDate: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<ReportResponse>>;
     public getImbalancePrices(balanceZoneId: number, startDate: string, endDate: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
         if (balanceZoneId === null || balanceZoneId === undefined) {
             throw new Error('Required parameter balanceZoneId was null or undefined when calling getImbalancePrices.');
         }
         if (startDate === null || startDate === undefined) {
             throw new Error('Required parameter startDate was null or undefined when calling getImbalancePrices.');
         }
         if (endDate === null || endDate === undefined) {
             throw new Error('Required parameter endDate was null or undefined when calling getImbalancePrices.');
         }
 
         let localVarQueryParameters = new HttpParams({encoder: this.encoder});
         if (balanceZoneId !== undefined && balanceZoneId !== null) {
           localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
             <any>balanceZoneId, 'balance_zone_id');
         }
         if (startDate !== undefined && startDate !== null) {
           localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
             <any>startDate, 'start_date');
         }
         if (endDate !== undefined && endDate !== null) {
           localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
             <any>endDate, 'end_date');
         }
 
         let localVarHeaders = this.defaultHeaders;
 
         let localVarCredential: string | undefined;
         // authentication (api_key) required
         localVarCredential = this.configuration.lookupCredential('api_key');
         if (localVarCredential) {
             localVarHeaders = localVarHeaders.set('X-Auth', localVarCredential);
         }
 
         let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
         if (localVarHttpHeaderAcceptSelected === undefined) {
             // to determine the Accept header
             const httpHeaderAccepts: string[] = [
                 'application/json'
             ];
             localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         }
         if (localVarHttpHeaderAcceptSelected !== undefined) {
             localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
         }
 
         let localVarHttpContext: HttpContext | undefined = options && options.context;
         if (localVarHttpContext === undefined) {
             localVarHttpContext = new HttpContext();
         }
 
 
         let responseType_: 'text' | 'json' | 'blob' = 'json';
         if (localVarHttpHeaderAcceptSelected) {
             if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                 responseType_ = 'text';
             } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                 responseType_ = 'json';
             } else {
                 responseType_ = 'blob';
             }
         }
 
         let localVarPath = `/market_data/prices/imbalance`;
         return this.httpClient.request<ReportResponse>('get', `${this.configuration.basePath}${localVarPath}`,
             {
                 context: localVarHttpContext,
                 params: localVarQueryParameters,
                 responseType: <any>responseType_,
                 withCredentials: this.configuration.withCredentials,
                 headers: localVarHeaders,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
 
     /**
      * Get Imbalance Prices Worksheet Template
      * 
      * @param balanceZoneId 
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public getImbalancePricesWorksheetTemplate(balanceZoneId: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<ContractWorksheetTemplateCol>>;
     public getImbalancePricesWorksheetTemplate(balanceZoneId: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<ContractWorksheetTemplateCol>>>;
     public getImbalancePricesWorksheetTemplate(balanceZoneId: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<ContractWorksheetTemplateCol>>>;
     public getImbalancePricesWorksheetTemplate(balanceZoneId: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
         if (balanceZoneId === null || balanceZoneId === undefined) {
             throw new Error('Required parameter balanceZoneId was null or undefined when calling getImbalancePricesWorksheetTemplate.');
         }
 
         let localVarQueryParameters = new HttpParams({encoder: this.encoder});
         if (balanceZoneId !== undefined && balanceZoneId !== null) {
           localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
             <any>balanceZoneId, 'balance_zone_id');
         }
 
         let localVarHeaders = this.defaultHeaders;
 
         let localVarCredential: string | undefined;
         // authentication (api_key) required
         localVarCredential = this.configuration.lookupCredential('api_key');
         if (localVarCredential) {
             localVarHeaders = localVarHeaders.set('X-Auth', localVarCredential);
         }
 
         let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
         if (localVarHttpHeaderAcceptSelected === undefined) {
             // to determine the Accept header
             const httpHeaderAccepts: string[] = [
                 'application/json'
             ];
             localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         }
         if (localVarHttpHeaderAcceptSelected !== undefined) {
             localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
         }
 
         let localVarHttpContext: HttpContext | undefined = options && options.context;
         if (localVarHttpContext === undefined) {
             localVarHttpContext = new HttpContext();
         }
 
 
         let responseType_: 'text' | 'json' | 'blob' = 'json';
         if (localVarHttpHeaderAcceptSelected) {
             if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                 responseType_ = 'text';
             } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                 responseType_ = 'json';
             } else {
                 responseType_ = 'blob';
             }
         }
 
         let localVarPath = `/market_data/prices/imbalance/worksheet`;
         return this.httpClient.request<Array<ContractWorksheetTemplateCol>>('get', `${this.configuration.basePath}${localVarPath}`,
             {
                 context: localVarHttpContext,
                 params: localVarQueryParameters,
                 responseType: <any>responseType_,
                 withCredentials: this.configuration.withCredentials,
                 headers: localVarHeaders,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
 
     /**
      * Get Logistic Costs
      * 
      * @param startDate 
      * @param endDate 
      * @param balanceZoneId 
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public getLogisticCosts(startDate: string, endDate: string, balanceZoneId?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<ReportResponse>;
     public getLogisticCosts(startDate: string, endDate: string, balanceZoneId?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<ReportResponse>>;
     public getLogisticCosts(startDate: string, endDate: string, balanceZoneId?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<ReportResponse>>;
     public getLogisticCosts(startDate: string, endDate: string, balanceZoneId?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
         if (startDate === null || startDate === undefined) {
             throw new Error('Required parameter startDate was null or undefined when calling getLogisticCosts.');
         }
         if (endDate === null || endDate === undefined) {
             throw new Error('Required parameter endDate was null or undefined when calling getLogisticCosts.');
         }
 
         let localVarQueryParameters = new HttpParams({encoder: this.encoder});
         if (balanceZoneId !== undefined && balanceZoneId !== null) {
           localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
             <any>balanceZoneId, 'balance_zone_id');
         }
         if (startDate !== undefined && startDate !== null) {
           localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
             <any>startDate, 'start_date');
         }
         if (endDate !== undefined && endDate !== null) {
           localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
             <any>endDate, 'end_date');
         }
 
         let localVarHeaders = this.defaultHeaders;
 
         let localVarCredential: string | undefined;
         // authentication (api_key) required
         localVarCredential = this.configuration.lookupCredential('api_key');
         if (localVarCredential) {
             localVarHeaders = localVarHeaders.set('X-Auth', localVarCredential);
         }
 
         let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
         if (localVarHttpHeaderAcceptSelected === undefined) {
             // to determine the Accept header
             const httpHeaderAccepts: string[] = [
                 'application/json'
             ];
             localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         }
         if (localVarHttpHeaderAcceptSelected !== undefined) {
             localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
         }
 
         let localVarHttpContext: HttpContext | undefined = options && options.context;
         if (localVarHttpContext === undefined) {
             localVarHttpContext = new HttpContext();
         }
 
 
         let responseType_: 'text' | 'json' | 'blob' = 'json';
         if (localVarHttpHeaderAcceptSelected) {
             if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                 responseType_ = 'text';
             } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                 responseType_ = 'json';
             } else {
                 responseType_ = 'blob';
             }
         }
 
         let localVarPath = `/market_data/prices/logistic`;
         return this.httpClient.request<ReportResponse>('get', `${this.configuration.basePath}${localVarPath}`,
             {
                 context: localVarHttpContext,
                 params: localVarQueryParameters,
                 responseType: <any>responseType_,
                 withCredentials: this.configuration.withCredentials,
                 headers: localVarHeaders,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
 
     /**
      * Get Imbalance Prices Worksheet Template
      * 
      * @param balanceZoneId 
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public getLogisticCostsTemplate(balanceZoneId: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<ContractWorksheetTemplateCol>>;
     public getLogisticCostsTemplate(balanceZoneId: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<ContractWorksheetTemplateCol>>>;
     public getLogisticCostsTemplate(balanceZoneId: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<ContractWorksheetTemplateCol>>>;
     public getLogisticCostsTemplate(balanceZoneId: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
         if (balanceZoneId === null || balanceZoneId === undefined) {
             throw new Error('Required parameter balanceZoneId was null or undefined when calling getLogisticCostsTemplate.');
         }
 
         let localVarQueryParameters = new HttpParams({encoder: this.encoder});
         if (balanceZoneId !== undefined && balanceZoneId !== null) {
           localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
             <any>balanceZoneId, 'balance_zone_id');
         }
 
         let localVarHeaders = this.defaultHeaders;
 
         let localVarCredential: string | undefined;
         // authentication (api_key) required
         localVarCredential = this.configuration.lookupCredential('api_key');
         if (localVarCredential) {
             localVarHeaders = localVarHeaders.set('X-Auth', localVarCredential);
         }
 
         let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
         if (localVarHttpHeaderAcceptSelected === undefined) {
             // to determine the Accept header
             const httpHeaderAccepts: string[] = [
                 'application/json'
             ];
             localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         }
         if (localVarHttpHeaderAcceptSelected !== undefined) {
             localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
         }
 
         let localVarHttpContext: HttpContext | undefined = options && options.context;
         if (localVarHttpContext === undefined) {
             localVarHttpContext = new HttpContext();
         }
 
 
         let responseType_: 'text' | 'json' | 'blob' = 'json';
         if (localVarHttpHeaderAcceptSelected) {
             if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                 responseType_ = 'text';
             } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                 responseType_ = 'json';
             } else {
                 responseType_ = 'blob';
             }
         }
 
         let localVarPath = `/market_data/prices/logistic/worksheet`;
         return this.httpClient.request<Array<ContractWorksheetTemplateCol>>('get', `${this.configuration.basePath}${localVarPath}`,
             {
                 context: localVarHttpContext,
                 params: localVarQueryParameters,
                 responseType: <any>responseType_,
                 withCredentials: this.configuration.withCredentials,
                 headers: localVarHeaders,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
 
     /**
      * Get List of Markets
      * 
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public getMarkets(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Market>;
     public getMarkets(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Market>>;
     public getMarkets(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Market>>;
     public getMarkets(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
 
         let localVarHeaders = this.defaultHeaders;
 
         let localVarCredential: string | undefined;
         // authentication (api_key) required
         localVarCredential = this.configuration.lookupCredential('api_key');
         if (localVarCredential) {
             localVarHeaders = localVarHeaders.set('X-Auth', localVarCredential);
         }
 
         let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
         if (localVarHttpHeaderAcceptSelected === undefined) {
             // to determine the Accept header
             const httpHeaderAccepts: string[] = [
                 'application/json'
             ];
             localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         }
         if (localVarHttpHeaderAcceptSelected !== undefined) {
             localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
         }
 
         let localVarHttpContext: HttpContext | undefined = options && options.context;
         if (localVarHttpContext === undefined) {
             localVarHttpContext = new HttpContext();
         }
 
 
         let responseType_: 'text' | 'json' | 'blob' = 'json';
         if (localVarHttpHeaderAcceptSelected) {
             if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                 responseType_ = 'text';
             } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                 responseType_ = 'json';
             } else {
                 responseType_ = 'blob';
             }
         }
 
         let localVarPath = `/market_data/markets`;
         return this.httpClient.request<Market>('get', `${this.configuration.basePath}${localVarPath}`,
             {
                 context: localVarHttpContext,
                 responseType: <any>responseType_,
                 withCredentials: this.configuration.withCredentials,
                 headers: localVarHeaders,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
 
     /**
      * Get Purchase/Sale Prices
      * 
      * @param curveId 
      * @param startDate 
      * @param endDate 
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public getPurchaseSalePrices(curveId: number, startDate: string, endDate: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<ReportResponse>;
     public getPurchaseSalePrices(curveId: number, startDate: string, endDate: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<ReportResponse>>;
     public getPurchaseSalePrices(curveId: number, startDate: string, endDate: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<ReportResponse>>;
     public getPurchaseSalePrices(curveId: number, startDate: string, endDate: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
         if (curveId === null || curveId === undefined) {
             throw new Error('Required parameter curveId was null or undefined when calling getPurchaseSalePrices.');
         }
         if (startDate === null || startDate === undefined) {
             throw new Error('Required parameter startDate was null or undefined when calling getPurchaseSalePrices.');
         }
         if (endDate === null || endDate === undefined) {
             throw new Error('Required parameter endDate was null or undefined when calling getPurchaseSalePrices.');
         }
 
         let localVarQueryParameters = new HttpParams({encoder: this.encoder});
         if (curveId !== undefined && curveId !== null) {
           localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
             <any>curveId, 'curve_id');
         }
         if (startDate !== undefined && startDate !== null) {
           localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
             <any>startDate, 'start_date');
         }
         if (endDate !== undefined && endDate !== null) {
           localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
             <any>endDate, 'end_date');
         }
 
         let localVarHeaders = this.defaultHeaders;
 
         let localVarCredential: string | undefined;
         // authentication (api_key) required
         localVarCredential = this.configuration.lookupCredential('api_key');
         if (localVarCredential) {
             localVarHeaders = localVarHeaders.set('X-Auth', localVarCredential);
         }
 
         let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
         if (localVarHttpHeaderAcceptSelected === undefined) {
             // to determine the Accept header
             const httpHeaderAccepts: string[] = [
                 'application/json'
             ];
             localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         }
         if (localVarHttpHeaderAcceptSelected !== undefined) {
             localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
         }
 
         let localVarHttpContext: HttpContext | undefined = options && options.context;
         if (localVarHttpContext === undefined) {
             localVarHttpContext = new HttpContext();
         }
 
 
         let responseType_: 'text' | 'json' | 'blob' = 'json';
         if (localVarHttpHeaderAcceptSelected) {
             if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                 responseType_ = 'text';
             } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                 responseType_ = 'json';
             } else {
                 responseType_ = 'blob';
             }
         }
 
         let localVarPath = `/market_data/prices/purchase_sale`;
         return this.httpClient.request<ReportResponse>('get', `${this.configuration.basePath}${localVarPath}`,
             {
                 context: localVarHttpContext,
                 params: localVarQueryParameters,
                 responseType: <any>responseType_,
                 withCredentials: this.configuration.withCredentials,
                 headers: localVarHeaders,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
 
     /**
      * Get Purchase/Sale Prices
      * 
      * @param balanceZoneId 
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public getPurchaseSalePricesLabels(balanceZoneId: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<ReportResponse>;
     public getPurchaseSalePricesLabels(balanceZoneId: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<ReportResponse>>;
     public getPurchaseSalePricesLabels(balanceZoneId: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<ReportResponse>>;
     public getPurchaseSalePricesLabels(balanceZoneId: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
         if (balanceZoneId === null || balanceZoneId === undefined) {
             throw new Error('Required parameter balanceZoneId was null or undefined when calling getPurchaseSalePricesLabels.');
         }
 
         let localVarQueryParameters = new HttpParams({encoder: this.encoder});
         if (balanceZoneId !== undefined && balanceZoneId !== null) {
           localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
             <any>balanceZoneId, 'balance_zone_id');
         }
 
         let localVarHeaders = this.defaultHeaders;
 
         let localVarCredential: string | undefined;
         // authentication (api_key) required
         localVarCredential = this.configuration.lookupCredential('api_key');
         if (localVarCredential) {
             localVarHeaders = localVarHeaders.set('X-Auth', localVarCredential);
         }
 
         let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
         if (localVarHttpHeaderAcceptSelected === undefined) {
             // to determine the Accept header
             const httpHeaderAccepts: string[] = [
                 'application/json'
             ];
             localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         }
         if (localVarHttpHeaderAcceptSelected !== undefined) {
             localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
         }
 
         let localVarHttpContext: HttpContext | undefined = options && options.context;
         if (localVarHttpContext === undefined) {
             localVarHttpContext = new HttpContext();
         }
 
 
         let responseType_: 'text' | 'json' | 'blob' = 'json';
         if (localVarHttpHeaderAcceptSelected) {
             if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                 responseType_ = 'text';
             } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                 responseType_ = 'json';
             } else {
                 responseType_ = 'blob';
             }
         }
 
         let localVarPath = `/market_data/prices/purchase_sale/labels`;
         return this.httpClient.request<ReportResponse>('get', `${this.configuration.basePath}${localVarPath}`,
             {
                 context: localVarHttpContext,
                 params: localVarQueryParameters,
                 responseType: <any>responseType_,
                 withCredentials: this.configuration.withCredentials,
                 headers: localVarHeaders,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
 
     /**
      * Get Purchase/Sale Worksheet Template
      * 
      * @param balanceZoneId 
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public getPurchaseSaleWorksheetTemplate(balanceZoneId: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<ContractWorksheetTemplateCol>>;
     public getPurchaseSaleWorksheetTemplate(balanceZoneId: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<ContractWorksheetTemplateCol>>>;
     public getPurchaseSaleWorksheetTemplate(balanceZoneId: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<ContractWorksheetTemplateCol>>>;
     public getPurchaseSaleWorksheetTemplate(balanceZoneId: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
         if (balanceZoneId === null || balanceZoneId === undefined) {
             throw new Error('Required parameter balanceZoneId was null or undefined when calling getPurchaseSaleWorksheetTemplate.');
         }
 
         let localVarQueryParameters = new HttpParams({encoder: this.encoder});
         if (balanceZoneId !== undefined && balanceZoneId !== null) {
           localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
             <any>balanceZoneId, 'balance_zone_id');
         }
 
         let localVarHeaders = this.defaultHeaders;
 
         let localVarCredential: string | undefined;
         // authentication (api_key) required
         localVarCredential = this.configuration.lookupCredential('api_key');
         if (localVarCredential) {
             localVarHeaders = localVarHeaders.set('X-Auth', localVarCredential);
         }
 
         let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
         if (localVarHttpHeaderAcceptSelected === undefined) {
             // to determine the Accept header
             const httpHeaderAccepts: string[] = [
                 'application/json'
             ];
             localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         }
         if (localVarHttpHeaderAcceptSelected !== undefined) {
             localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
         }
 
         let localVarHttpContext: HttpContext | undefined = options && options.context;
         if (localVarHttpContext === undefined) {
             localVarHttpContext = new HttpContext();
         }
 
 
         let responseType_: 'text' | 'json' | 'blob' = 'json';
         if (localVarHttpHeaderAcceptSelected) {
             if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                 responseType_ = 'text';
             } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                 responseType_ = 'json';
             } else {
                 responseType_ = 'blob';
             }
         }
 
         let localVarPath = `/market_data/prices/purchase_sale/worksheet`;
         return this.httpClient.request<Array<ContractWorksheetTemplateCol>>('get', `${this.configuration.basePath}${localVarPath}`,
             {
                 context: localVarHttpContext,
                 params: localVarQueryParameters,
                 responseType: <any>responseType_,
                 withCredentials: this.configuration.withCredentials,
                 headers: localVarHeaders,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
 
     /**
      * Upload Imbalance Prices via Worksheet
      * 
      * @param balanceZoneId 
      * @param requestBody Contracts Worksheet object to add
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public uploadImbalancePricesWorksheet(balanceZoneId: number, requestBody: Array<{ [key: string]: any; }>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;
     public uploadImbalancePricesWorksheet(balanceZoneId: number, requestBody: Array<{ [key: string]: any; }>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;
     public uploadImbalancePricesWorksheet(balanceZoneId: number, requestBody: Array<{ [key: string]: any; }>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;
     public uploadImbalancePricesWorksheet(balanceZoneId: number, requestBody: Array<{ [key: string]: any; }>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {
         if (balanceZoneId === null || balanceZoneId === undefined) {
             throw new Error('Required parameter balanceZoneId was null or undefined when calling uploadImbalancePricesWorksheet.');
         }
         if (requestBody === null || requestBody === undefined) {
             throw new Error('Required parameter requestBody was null or undefined when calling uploadImbalancePricesWorksheet.');
         }
 
         let localVarQueryParameters = new HttpParams({encoder: this.encoder});
         if (balanceZoneId !== undefined && balanceZoneId !== null) {
           localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
             <any>balanceZoneId, 'balance_zone_id');
         }
 
         let localVarHeaders = this.defaultHeaders;
 
         let localVarCredential: string | undefined;
         // authentication (api_key) required
         localVarCredential = this.configuration.lookupCredential('api_key');
         if (localVarCredential) {
             localVarHeaders = localVarHeaders.set('X-Auth', localVarCredential);
         }
 
         let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
         if (localVarHttpHeaderAcceptSelected === undefined) {
             // to determine the Accept header
             const httpHeaderAccepts: string[] = [
             ];
             localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         }
         if (localVarHttpHeaderAcceptSelected !== undefined) {
             localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
         }
 
         let localVarHttpContext: HttpContext | undefined = options && options.context;
         if (localVarHttpContext === undefined) {
             localVarHttpContext = new HttpContext();
         }
 
 
         // to determine the Content-Type header
         const consumes: string[] = [
             'application/json'
         ];
         const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
         if (httpContentTypeSelected !== undefined) {
             localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
         }
 
         let responseType_: 'text' | 'json' | 'blob' = 'json';
         if (localVarHttpHeaderAcceptSelected) {
             if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                 responseType_ = 'text';
             } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                 responseType_ = 'json';
             } else {
                 responseType_ = 'blob';
             }
         }
 
         let localVarPath = `/market_data/prices/imbalance/worksheet`;
         return this.httpClient.request<any>('post', `${this.configuration.basePath}${localVarPath}`,
             {
                 context: localVarHttpContext,
                 body: requestBody,
                 params: localVarQueryParameters,
                 responseType: <any>responseType_,
                 withCredentials: this.configuration.withCredentials,
                 headers: localVarHeaders,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
 
     /**
      * Upload Logistic Costs via Worksheet
      * 
      * @param balanceZoneId 
      * @param requestBody Contracts Worksheet object to add
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public uploadLogisticCostsWorksheet(balanceZoneId: number, requestBody: Array<{ [key: string]: any; }>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;
     public uploadLogisticCostsWorksheet(balanceZoneId: number, requestBody: Array<{ [key: string]: any; }>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;
     public uploadLogisticCostsWorksheet(balanceZoneId: number, requestBody: Array<{ [key: string]: any; }>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;
     public uploadLogisticCostsWorksheet(balanceZoneId: number, requestBody: Array<{ [key: string]: any; }>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {
         if (balanceZoneId === null || balanceZoneId === undefined) {
             throw new Error('Required parameter balanceZoneId was null or undefined when calling uploadLogisticCostsWorksheet.');
         }
         if (requestBody === null || requestBody === undefined) {
             throw new Error('Required parameter requestBody was null or undefined when calling uploadLogisticCostsWorksheet.');
         }
 
         let localVarQueryParameters = new HttpParams({encoder: this.encoder});
         if (balanceZoneId !== undefined && balanceZoneId !== null) {
           localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
             <any>balanceZoneId, 'balance_zone_id');
         }
 
         let localVarHeaders = this.defaultHeaders;
 
         let localVarCredential: string | undefined;
         // authentication (api_key) required
         localVarCredential = this.configuration.lookupCredential('api_key');
         if (localVarCredential) {
             localVarHeaders = localVarHeaders.set('X-Auth', localVarCredential);
         }
 
         let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
         if (localVarHttpHeaderAcceptSelected === undefined) {
             // to determine the Accept header
             const httpHeaderAccepts: string[] = [
             ];
             localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         }
         if (localVarHttpHeaderAcceptSelected !== undefined) {
             localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
         }
 
         let localVarHttpContext: HttpContext | undefined = options && options.context;
         if (localVarHttpContext === undefined) {
             localVarHttpContext = new HttpContext();
         }
 
 
         // to determine the Content-Type header
         const consumes: string[] = [
             'application/json'
         ];
         const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
         if (httpContentTypeSelected !== undefined) {
             localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
         }
 
         let responseType_: 'text' | 'json' | 'blob' = 'json';
         if (localVarHttpHeaderAcceptSelected) {
             if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                 responseType_ = 'text';
             } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                 responseType_ = 'json';
             } else {
                 responseType_ = 'blob';
             }
         }
 
         let localVarPath = `/market_data/prices/logistic/worksheet`;
         return this.httpClient.request<any>('post', `${this.configuration.basePath}${localVarPath}`,
             {
                 context: localVarHttpContext,
                 body: requestBody,
                 params: localVarQueryParameters,
                 responseType: <any>responseType_,
                 withCredentials: this.configuration.withCredentials,
                 headers: localVarHeaders,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
 
     /**
      * Upload Purchase/Sale Prices via Worksheet
      * 
      * @param balanceZoneId 
      * @param requestBody Contracts Worksheet object to add
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public uploadPurchaseSaleWorksheet(balanceZoneId: number, requestBody: Array<{ [key: string]: any; }>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;
     public uploadPurchaseSaleWorksheet(balanceZoneId: number, requestBody: Array<{ [key: string]: any; }>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;
     public uploadPurchaseSaleWorksheet(balanceZoneId: number, requestBody: Array<{ [key: string]: any; }>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;
     public uploadPurchaseSaleWorksheet(balanceZoneId: number, requestBody: Array<{ [key: string]: any; }>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {
         if (balanceZoneId === null || balanceZoneId === undefined) {
             throw new Error('Required parameter balanceZoneId was null or undefined when calling uploadPurchaseSaleWorksheet.');
         }
         if (requestBody === null || requestBody === undefined) {
             throw new Error('Required parameter requestBody was null or undefined when calling uploadPurchaseSaleWorksheet.');
         }
 
         let localVarQueryParameters = new HttpParams({encoder: this.encoder});
         if (balanceZoneId !== undefined && balanceZoneId !== null) {
           localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
             <any>balanceZoneId, 'balance_zone_id');
         }
 
         let localVarHeaders = this.defaultHeaders;
 
         let localVarCredential: string | undefined;
         // authentication (api_key) required
         localVarCredential = this.configuration.lookupCredential('api_key');
         if (localVarCredential) {
             localVarHeaders = localVarHeaders.set('X-Auth', localVarCredential);
         }
 
         let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
         if (localVarHttpHeaderAcceptSelected === undefined) {
             // to determine the Accept header
             const httpHeaderAccepts: string[] = [
             ];
             localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
         }
         if (localVarHttpHeaderAcceptSelected !== undefined) {
             localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
         }
 
         let localVarHttpContext: HttpContext | undefined = options && options.context;
         if (localVarHttpContext === undefined) {
             localVarHttpContext = new HttpContext();
         }
 
 
         // to determine the Content-Type header
         const consumes: string[] = [
             'application/json'
         ];
         const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
         if (httpContentTypeSelected !== undefined) {
             localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
         }
 
         let responseType_: 'text' | 'json' | 'blob' = 'json';
         if (localVarHttpHeaderAcceptSelected) {
             if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                 responseType_ = 'text';
             } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                 responseType_ = 'json';
             } else {
                 responseType_ = 'blob';
             }
         }
 
         let localVarPath = `/market_data/prices/purchase_sale/worksheet`;
         return this.httpClient.request<any>('post', `${this.configuration.basePath}${localVarPath}`,
             {
                 context: localVarHttpContext,
                 body: requestBody,
                 params: localVarQueryParameters,
                 responseType: <any>responseType_,
                 withCredentials: this.configuration.withCredentials,
                 headers: localVarHeaders,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
 
 }
 